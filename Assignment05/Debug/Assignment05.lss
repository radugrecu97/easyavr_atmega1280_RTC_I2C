
Assignment05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  0000110c  000011a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000110c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800206  00800206  000011a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d79  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001036  00000000  00000000  000030c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed0  00000000  00000000  000040f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00004fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f0  00000000  00000000  00005314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c85  00000000  00000000  00005c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00006889  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
       2:	00 00       	nop
       4:	95 c0       	rjmp	.+298    	; 0x130 <__bad_interrupt>
       6:	00 00       	nop
       8:	93 c0       	rjmp	.+294    	; 0x130 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c3       	rjmp	.+1970   	; 0x7c0 <__vector_3>
       e:	00 00       	nop
      10:	8f c0       	rjmp	.+286    	; 0x130 <__bad_interrupt>
      12:	00 00       	nop
      14:	8d c0       	rjmp	.+282    	; 0x130 <__bad_interrupt>
      16:	00 00       	nop
      18:	8b c0       	rjmp	.+278    	; 0x130 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	89 c0       	rjmp	.+274    	; 0x130 <__bad_interrupt>
      1e:	00 00       	nop
      20:	87 c0       	rjmp	.+270    	; 0x130 <__bad_interrupt>
      22:	00 00       	nop
      24:	85 c0       	rjmp	.+266    	; 0x130 <__bad_interrupt>
      26:	00 00       	nop
      28:	83 c0       	rjmp	.+262    	; 0x130 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	81 c0       	rjmp	.+258    	; 0x130 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c0       	rjmp	.+254    	; 0x130 <__bad_interrupt>
      32:	00 00       	nop
      34:	7d c0       	rjmp	.+250    	; 0x130 <__bad_interrupt>
      36:	00 00       	nop
      38:	7b c0       	rjmp	.+246    	; 0x130 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	79 c0       	rjmp	.+242    	; 0x130 <__bad_interrupt>
      3e:	00 00       	nop
      40:	77 c0       	rjmp	.+238    	; 0x130 <__bad_interrupt>
      42:	00 00       	nop
      44:	75 c0       	rjmp	.+234    	; 0x130 <__bad_interrupt>
      46:	00 00       	nop
      48:	73 c0       	rjmp	.+230    	; 0x130 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	71 c0       	rjmp	.+226    	; 0x130 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6f c0       	rjmp	.+222    	; 0x130 <__bad_interrupt>
      52:	00 00       	nop
      54:	6d c0       	rjmp	.+218    	; 0x130 <__bad_interrupt>
      56:	00 00       	nop
      58:	6b c0       	rjmp	.+214    	; 0x130 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	69 c0       	rjmp	.+210    	; 0x130 <__bad_interrupt>
      5e:	00 00       	nop
      60:	67 c0       	rjmp	.+206    	; 0x130 <__bad_interrupt>
      62:	00 00       	nop
      64:	65 c0       	rjmp	.+202    	; 0x130 <__bad_interrupt>
      66:	00 00       	nop
      68:	63 c0       	rjmp	.+198    	; 0x130 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	61 c0       	rjmp	.+194    	; 0x130 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5f c0       	rjmp	.+190    	; 0x130 <__bad_interrupt>
      72:	00 00       	nop
      74:	5d c0       	rjmp	.+186    	; 0x130 <__bad_interrupt>
      76:	00 00       	nop
      78:	5b c0       	rjmp	.+182    	; 0x130 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	59 c0       	rjmp	.+178    	; 0x130 <__bad_interrupt>
      7e:	00 00       	nop
      80:	57 c0       	rjmp	.+174    	; 0x130 <__bad_interrupt>
      82:	00 00       	nop
      84:	55 c0       	rjmp	.+170    	; 0x130 <__bad_interrupt>
      86:	00 00       	nop
      88:	53 c0       	rjmp	.+166    	; 0x130 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	51 c0       	rjmp	.+162    	; 0x130 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4f c0       	rjmp	.+158    	; 0x130 <__bad_interrupt>
      92:	00 00       	nop
      94:	4d c0       	rjmp	.+154    	; 0x130 <__bad_interrupt>
      96:	00 00       	nop
      98:	4b c0       	rjmp	.+150    	; 0x130 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	fe c3       	rjmp	.+2044   	; 0x89a <__vector_39>
      9e:	00 00       	nop
      a0:	47 c0       	rjmp	.+142    	; 0x130 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	45 c0       	rjmp	.+138    	; 0x130 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e4 c0       	rjmp	.+456    	; 0x272 <__vector_42>
      aa:	00 00       	nop
      ac:	41 c0       	rjmp	.+130    	; 0x130 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3f c0       	rjmp	.+126    	; 0x130 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3d c0       	rjmp	.+122    	; 0x130 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3b c0       	rjmp	.+118    	; 0x130 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	39 c0       	rjmp	.+114    	; 0x130 <__bad_interrupt>
      be:	00 00       	nop
      c0:	37 c0       	rjmp	.+110    	; 0x130 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	35 c0       	rjmp	.+106    	; 0x130 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	33 c0       	rjmp	.+102    	; 0x130 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	31 c0       	rjmp	.+98     	; 0x130 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2f c0       	rjmp	.+94     	; 0x130 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2d c0       	rjmp	.+90     	; 0x130 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2b c0       	rjmp	.+86     	; 0x130 <__bad_interrupt>
      da:	00 00       	nop
      dc:	29 c0       	rjmp	.+82     	; 0x130 <__bad_interrupt>
      de:	00 00       	nop
      e0:	27 c0       	rjmp	.+78     	; 0x130 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d0 00       	.word	0x00d0	; ????
      e6:	d2 00       	.word	0x00d2	; ????
      e8:	d4 00       	.word	0x00d4	; ????
      ea:	d6 00       	.word	0x00d6	; ????
      ec:	d8 00       	.word	0x00d8	; ????
      ee:	da 00       	.word	0x00da	; ????
      f0:	dc 00       	.word	0x00dc	; ????
      f2:	de 00       	.word	0x00de	; ????
      f4:	e0 00       	.word	0x00e0	; ????

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d1 e2       	ldi	r29, 0x21	; 33
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_clear_bss>:
     102:	22 e0       	ldi	r18, 0x02	; 2
     104:	a6 e0       	ldi	r26, 0x06	; 6
     106:	b2 e0       	ldi	r27, 0x02	; 2
     108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
     10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
     10c:	ab 32       	cpi	r26, 0x2B	; 43
     10e:	b2 07       	cpc	r27, r18
     110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>

00000112 <__do_copy_data>:
     112:	12 e0       	ldi	r17, 0x02	; 2
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b2 e0       	ldi	r27, 0x02	; 2
     118:	ec e0       	ldi	r30, 0x0C	; 12
     11a:	f1 e1       	ldi	r31, 0x11	; 17
     11c:	00 e0       	ldi	r16, 0x00	; 0
     11e:	0b bf       	out	0x3b, r16	; 59
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x14>
     122:	07 90       	elpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	a6 30       	cpi	r26, 0x06	; 6
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0x10>
     12c:	03 d5       	rcall	.+2566   	; 0xb34 <main>
     12e:	ec c7       	rjmp	.+4056   	; 0x1108 <_exit>

00000130 <__bad_interrupt>:
     130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <init_7_segment>:
	//set dp section to 1 if at least 1 decimal
	if (no_of_decimals > 0)
		valueHex[no_of_decimals]++;
		
	init_timer0();
}
     132:	84 b1       	in	r24, 0x04	; 4
     134:	8e 60       	ori	r24, 0x0E	; 14
     136:	84 b9       	out	0x04, r24	; 4
     138:	e7 e0       	ldi	r30, 0x07	; 7
     13a:	f1 e0       	ldi	r31, 0x01	; 1
     13c:	80 81       	ld	r24, Z
     13e:	88 60       	ori	r24, 0x08	; 8
     140:	80 83       	st	Z, r24
     142:	2b 9a       	sbi	0x05, 3	; 5
     144:	8f e0       	ldi	r24, 0x0F	; 15
     146:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
     14a:	08 95       	ret

0000014c <init_timer0>:
     14c:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
     150:	e1 ea       	ldi	r30, 0xA1	; 161
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	10 82       	st	Z, r1
     156:	8f e9       	ldi	r24, 0x9F	; 159
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
     15e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>
     162:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
     166:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
     16a:	80 81       	ld	r24, Z
     16c:	84 60       	ori	r24, 0x04	; 4
     16e:	80 83       	st	Z, r24
     170:	80 81       	ld	r24, Z
     172:	8d 7f       	andi	r24, 0xFD	; 253
     174:	80 83       	st	Z, r24
     176:	80 81       	ld	r24, Z
     178:	8e 7f       	andi	r24, 0xFE	; 254
     17a:	80 83       	st	Z, r24
     17c:	80 81       	ld	r24, Z
     17e:	88 60       	ori	r24, 0x08	; 8
     180:	80 83       	st	Z, r24
     182:	e2 e7       	ldi	r30, 0x72	; 114
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	82 60       	ori	r24, 0x02	; 2
     18a:	80 83       	st	Z, r24
     18c:	08 95       	ret

0000018e <digitToHex>:
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	fc 01       	movw	r30, r24
     192:	31 97       	sbiw	r30, 0x01	; 1
     194:	e9 30       	cpi	r30, 0x09	; 9
     196:	f1 05       	cpc	r31, r1
     198:	a8 f4       	brcc	.+42     	; 0x1c4 <digitToHex+0x36>
     19a:	ee 58       	subi	r30, 0x8E	; 142
     19c:	ff 4f       	sbci	r31, 0xFF	; 255
     19e:	59 c6       	rjmp	.+3250   	; 0xe52 <__tablejump2__>
     1a0:	80 e6       	ldi	r24, 0x60	; 96
     1a2:	08 95       	ret
     1a4:	8a ed       	ldi	r24, 0xDA	; 218
     1a6:	08 95       	ret
     1a8:	82 ef       	ldi	r24, 0xF2	; 242
     1aa:	08 95       	ret
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	08 95       	ret
     1b0:	86 eb       	ldi	r24, 0xB6	; 182
     1b2:	08 95       	ret
     1b4:	8e eb       	ldi	r24, 0xBE	; 190
     1b6:	08 95       	ret
     1b8:	80 ee       	ldi	r24, 0xE0	; 224
     1ba:	08 95       	ret
     1bc:	8e ef       	ldi	r24, 0xFE	; 254
     1be:	08 95       	ret
     1c0:	86 ef       	ldi	r24, 0xF6	; 246
     1c2:	08 95       	ret
     1c4:	8c ef       	ldi	r24, 0xFC	; 252
     1c6:	08 95       	ret

000001c8 <printint_7_segment>:
     1c8:	ef 92       	push	r14
     1ca:	ff 92       	push	r15
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	8c 01       	movw	r16, r24
     1d6:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <currentSegment>
     1da:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <numberLength>
     1de:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <valueHex>
     1e2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <valueHex+0x1>
     1e6:	07 d7       	rcall	.+3598   	; 0xff6 <free>
     1e8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <numberLength>
     1ec:	8c 5f       	subi	r24, 0xFC	; 252
     1ee:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <numberLength>
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	68 d6       	rcall	.+3280   	; 0xec6 <malloc>
     1f6:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <valueHex+0x1>
     1fa:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <valueHex>
     1fe:	c0 e0       	ldi	r28, 0x00	; 0
     200:	d0 e0       	ldi	r29, 0x00	; 0
     202:	e0 90 12 02 	lds	r14, 0x0212	; 0x800212 <valueHex>
     206:	f0 90 13 02 	lds	r15, 0x0213	; 0x800213 <valueHex+0x1>
     20a:	ec 0e       	add	r14, r28
     20c:	fd 1e       	adc	r15, r29
     20e:	98 01       	movw	r18, r16
     210:	ad ec       	ldi	r26, 0xCD	; 205
     212:	bc ec       	ldi	r27, 0xCC	; 204
     214:	27 d6       	rcall	.+3150   	; 0xe64 <__umulhisi3>
     216:	96 95       	lsr	r25
     218:	87 95       	ror	r24
     21a:	96 95       	lsr	r25
     21c:	87 95       	ror	r24
     21e:	96 95       	lsr	r25
     220:	87 95       	ror	r24
     222:	9c 01       	movw	r18, r24
     224:	22 0f       	add	r18, r18
     226:	33 1f       	adc	r19, r19
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	88 0f       	add	r24, r24
     232:	99 1f       	adc	r25, r25
     234:	82 0f       	add	r24, r18
     236:	93 1f       	adc	r25, r19
     238:	20 2f       	mov	r18, r16
     23a:	28 1b       	sub	r18, r24
     23c:	82 2f       	mov	r24, r18
     23e:	a7 df       	rcall	.-178    	; 0x18e <digitToHex>
     240:	f7 01       	movw	r30, r14
     242:	80 83       	st	Z, r24
     244:	98 01       	movw	r18, r16
     246:	ad ec       	ldi	r26, 0xCD	; 205
     248:	bc ec       	ldi	r27, 0xCC	; 204
     24a:	0c d6       	rcall	.+3096   	; 0xe64 <__umulhisi3>
     24c:	8c 01       	movw	r16, r24
     24e:	16 95       	lsr	r17
     250:	07 95       	ror	r16
     252:	16 95       	lsr	r17
     254:	07 95       	ror	r16
     256:	16 95       	lsr	r17
     258:	07 95       	ror	r16
     25a:	21 96       	adiw	r28, 0x01	; 1
     25c:	c4 30       	cpi	r28, 0x04	; 4
     25e:	d1 05       	cpc	r29, r1
     260:	81 f6       	brne	.-96     	; 0x202 <printint_7_segment+0x3a>
     262:	74 df       	rcall	.-280    	; 0x14c <init_timer0>
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	ff 90       	pop	r15
     26e:	ef 90       	pop	r14
     270:	08 95       	ret

00000272 <__vector_42>:




ISR(TIMER4_COMPA_vect)
{
     272:	1f 92       	push	r1
     274:	0f 92       	push	r0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	0b b6       	in	r0, 0x3b	; 59
     27e:	0f 92       	push	r0
     280:	2f 93       	push	r18
     282:	3f 93       	push	r19
     284:	8f 93       	push	r24
     286:	9f 93       	push	r25
     288:	ef 93       	push	r30
     28a:	ff 93       	push	r31
	//push to storage register
	for (int j = 0; j<8; j++)
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
	{
		//load MSB firsts
		if ((valueHex[currentSegment] >> j) & 1)
     290:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <currentSegment>
     294:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <valueHex>
     298:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <valueHex+0x1>
     29c:	e8 0f       	add	r30, r24
     29e:	f1 1d       	adc	r31, r1
     2a0:	80 81       	ld	r24, Z
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	02 2e       	mov	r0, r18
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__vector_42+0x3a>
     2a8:	95 95       	asr	r25
     2aa:	87 95       	ror	r24
     2ac:	0a 94       	dec	r0
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <__vector_42+0x36>
     2b0:	80 ff       	sbrs	r24, 0
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <__vector_42+0x46>
			PORTB |= _BV(PB2);
     2b4:	2a 9a       	sbi	0x05, 2	; 5
     2b6:	01 c0       	rjmp	.+2      	; 0x2ba <__vector_42+0x48>
		else
			PORTB &= ~(_BV(PB2));
     2b8:	2a 98       	cbi	0x05, 2	; 5
		
		//set SHCP to high
		PORTB |= _BV(PB1);
     2ba:	29 9a       	sbi	0x05, 1	; 5
		
		//set SHCP to low
		PORTB &= ~(_BV(PB1));
     2bc:	29 98       	cbi	0x05, 1	; 5


ISR(TIMER4_COMPA_vect)
{
	//push to storage register
	for (int j = 0; j<8; j++)
     2be:	2f 5f       	subi	r18, 0xFF	; 255
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	28 30       	cpi	r18, 0x08	; 8
     2c4:	31 05       	cpc	r19, r1
     2c6:	21 f7       	brne	.-56     	; 0x290 <__vector_42+0x1e>
		//set SHCP to low
		PORTB &= ~(_BV(PB1));
	}

	//clear all the displaying segments then light-up the segment on the current position
	PORTL &= ~(_BV(PL0) | _BV(PL1) | _BV(PL2) | _BV(PL3));
     2c8:	eb e0       	ldi	r30, 0x0B	; 11
     2ca:	f1 e0       	ldi	r31, 0x01	; 1
     2cc:	80 81       	ld	r24, Z
     2ce:	80 7f       	andi	r24, 0xF0	; 240
     2d0:	80 83       	st	Z, r24
	
	//select which segment the byte will be displayed on
	PORTL |= _BV(currentSegment);
     2d2:	20 81       	ld	r18, Z
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	00 90 14 02 	lds	r0, 0x0214	; 0x800214 <currentSegment>
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <__vector_42+0x70>
     2de:	88 0f       	add	r24, r24
     2e0:	99 1f       	adc	r25, r25
     2e2:	0a 94       	dec	r0
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <__vector_42+0x6c>
     2e6:	82 2b       	or	r24, r18
     2e8:	80 83       	st	Z, r24
	
	//shift byte to display
	//set latch high
	PORTK |= _BV(PK3);
     2ea:	e8 e0       	ldi	r30, 0x08	; 8
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	80 81       	ld	r24, Z
     2f0:	88 60       	ori	r24, 0x08	; 8
     2f2:	80 83       	st	Z, r24
	
	//set latch low
	PORTK &= ~(_BV(PK3));
     2f4:	80 81       	ld	r24, Z
     2f6:	87 7f       	andi	r24, 0xF7	; 247
     2f8:	80 83       	st	Z, r24
	
	//move to next segment
	currentSegment++;
     2fa:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <currentSegment>
     2fe:	8f 5f       	subi	r24, 0xFF	; 255
     300:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <currentSegment>
	
	//reset segment position once the last digit is printed
	if (currentSegment == numberLength)
     304:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <numberLength>
     308:	89 13       	cpse	r24, r25
     30a:	02 c0       	rjmp	.+4      	; 0x310 <__vector_42+0x9e>
		currentSegment = 0;
     30c:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <currentSegment>
     310:	ff 91       	pop	r31
     312:	ef 91       	pop	r30
     314:	9f 91       	pop	r25
     316:	8f 91       	pop	r24
     318:	3f 91       	pop	r19
     31a:	2f 91       	pop	r18
     31c:	0f 90       	pop	r0
     31e:	0b be       	out	0x3b, r0	; 59
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <RTC_set_time>:
#ifndef SLAVE_ADDRESS
#define SLAVE_ADDRESS 0b1101000
#endif

uint8_t RTC_set_time(uint8_t hours, uint8_t minutes, uint8_t seconds)
{
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	00 d0       	rcall	.+0      	; 0x334 <RTC_set_time+0xa>
     334:	1f 92       	push	r1
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	06 2f       	mov	r16, r22
     33c:	14 2f       	mov	r17, r20
	// Hour
	uint8_t hour_value = ((hours / 10) << 4) + (hours % 10);
	// set to 24-hr mode
	hour_value &= 0b10111111;
     33e:	9d ec       	ldi	r25, 0xCD	; 205
     340:	89 9f       	mul	r24, r25
     342:	91 2d       	mov	r25, r1
     344:	11 24       	eor	r1, r1
     346:	96 95       	lsr	r25
     348:	96 95       	lsr	r25
     34a:	96 95       	lsr	r25
     34c:	39 2f       	mov	r19, r25
     34e:	33 0f       	add	r19, r19
     350:	23 2f       	mov	r18, r19
     352:	22 0f       	add	r18, r18
     354:	22 0f       	add	r18, r18
     356:	23 0f       	add	r18, r19
     358:	82 1b       	sub	r24, r18
     35a:	20 e1       	ldi	r18, 0x10	; 16
     35c:	92 9f       	mul	r25, r18
     35e:	80 0d       	add	r24, r0
     360:	11 24       	eor	r1, r1
     362:	8f 7b       	andi	r24, 0xBF	; 191
     364:	89 83       	std	Y+1, r24	; 0x01
	i2c_write_addr(SLAVE_ADDRESS, 0x02, &hour_value, 1);
     366:	21 e0       	ldi	r18, 0x01	; 1
     368:	ae 01       	movw	r20, r28
     36a:	4f 5f       	subi	r20, 0xFF	; 255
     36c:	5f 4f       	sbci	r21, 0xFF	; 255
     36e:	62 e0       	ldi	r22, 0x02	; 2
     370:	88 e6       	ldi	r24, 0x68	; 104
     372:	5b d2       	rcall	.+1206   	; 0x82a <i2c_write_addr>
	
	// Don't continue until transmission has finished
	while (i2c_status());
     374:	57 d2       	rcall	.+1198   	; 0x824 <i2c_status>
     376:	81 11       	cpse	r24, r1
     378:	fd cf       	rjmp	.-6      	; 0x374 <RTC_set_time+0x4a>
     37a:	8d ec       	ldi	r24, 0xCD	; 205
	
	// Minutes
	uint8_t min_value = ((minutes / 10) << 4) + (minutes % 10);
     37c:	08 9f       	mul	r16, r24
     37e:	81 2d       	mov	r24, r1
     380:	11 24       	eor	r1, r1
     382:	86 95       	lsr	r24
     384:	86 95       	lsr	r24
     386:	86 95       	lsr	r24
     388:	28 2f       	mov	r18, r24
     38a:	22 0f       	add	r18, r18
     38c:	92 2f       	mov	r25, r18
     38e:	99 0f       	add	r25, r25
     390:	99 0f       	add	r25, r25
     392:	92 0f       	add	r25, r18
     394:	09 1b       	sub	r16, r25
     396:	90 e1       	ldi	r25, 0x10	; 16
     398:	89 9f       	mul	r24, r25
     39a:	00 0d       	add	r16, r0
     39c:	11 24       	eor	r1, r1
     39e:	0a 83       	std	Y+2, r16	; 0x02
     3a0:	21 e0       	ldi	r18, 0x01	; 1
	
	i2c_write_addr(SLAVE_ADDRESS, 0x01, &min_value, 1);
     3a2:	ae 01       	movw	r20, r28
     3a4:	4e 5f       	subi	r20, 0xFE	; 254
     3a6:	5f 4f       	sbci	r21, 0xFF	; 255
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	88 e6       	ldi	r24, 0x68	; 104
     3ac:	3e d2       	rcall	.+1148   	; 0x82a <i2c_write_addr>
	
	// Don't continue until transmission has finished
	while (i2c_status());
     3ae:	3a d2       	rcall	.+1140   	; 0x824 <i2c_status>
     3b0:	81 11       	cpse	r24, r1
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <RTC_set_time+0x84>
     3b4:	8d ec       	ldi	r24, 0xCD	; 205
	
	// Seconds
	uint8_t sec_value = ((seconds / 10) << 4) + (seconds % 10);
     3b6:	18 9f       	mul	r17, r24
     3b8:	81 2d       	mov	r24, r1
     3ba:	11 24       	eor	r1, r1
     3bc:	86 95       	lsr	r24
     3be:	86 95       	lsr	r24
     3c0:	86 95       	lsr	r24
     3c2:	28 2f       	mov	r18, r24
     3c4:	22 0f       	add	r18, r18
     3c6:	92 2f       	mov	r25, r18
     3c8:	99 0f       	add	r25, r25
     3ca:	99 0f       	add	r25, r25
     3cc:	92 0f       	add	r25, r18
     3ce:	19 1b       	sub	r17, r25
     3d0:	20 e1       	ldi	r18, 0x10	; 16
     3d2:	82 9f       	mul	r24, r18
     3d4:	10 0d       	add	r17, r0
     3d6:	11 24       	eor	r1, r1
     3d8:	1b 83       	std	Y+3, r17	; 0x03
     3da:	21 e0       	ldi	r18, 0x01	; 1
	
	i2c_write_addr(SLAVE_ADDRESS, 0x00, &sec_value, 1);
     3dc:	ae 01       	movw	r20, r28
     3de:	4d 5f       	subi	r20, 0xFD	; 253
     3e0:	5f 4f       	sbci	r21, 0xFF	; 255
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	88 e6       	ldi	r24, 0x68	; 104
     3e6:	21 d2       	rcall	.+1090   	; 0x82a <i2c_write_addr>
	
	// Don't continue until transmission has finished
	while (i2c_status());
     3e8:	1d d2       	rcall	.+1082   	; 0x824 <i2c_status>
     3ea:	81 11       	cpse	r24, r1
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <RTC_set_time+0xbe>
     3ee:	0f 90       	pop	r0
}
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	08 95       	ret

000003fe <RTC_set_date>:
     3fe:	ff 92       	push	r15

uint8_t RTC_set_date(uint8_t year, uint8_t month, uint8_t day)
{
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	00 d0       	rcall	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40a:	1f 92       	push	r1
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	18 2f       	mov	r17, r24
     412:	f6 2e       	mov	r15, r22
     414:	04 2f       	mov	r16, r20
	// Year
	// set tens
	uint8_t year_value = ((year / 10) << 4) + (year % 10);
     416:	8d ec       	ldi	r24, 0xCD	; 205
     418:	18 9f       	mul	r17, r24
     41a:	81 2d       	mov	r24, r1
     41c:	11 24       	eor	r1, r1
     41e:	86 95       	lsr	r24
     420:	86 95       	lsr	r24
     422:	86 95       	lsr	r24
     424:	28 2f       	mov	r18, r24
     426:	22 0f       	add	r18, r18
     428:	92 2f       	mov	r25, r18
     42a:	99 0f       	add	r25, r25
     42c:	99 0f       	add	r25, r25
     42e:	92 0f       	add	r25, r18
     430:	21 2f       	mov	r18, r17
     432:	29 1b       	sub	r18, r25
     434:	92 2f       	mov	r25, r18
     436:	20 e1       	ldi	r18, 0x10	; 16
     438:	82 9f       	mul	r24, r18
     43a:	90 0d       	add	r25, r0
     43c:	11 24       	eor	r1, r1
     43e:	99 83       	std	Y+1, r25	; 0x01
	i2c_write_addr(SLAVE_ADDRESS, 0x06, &year_value, 1);
     440:	21 e0       	ldi	r18, 0x01	; 1
     442:	ae 01       	movw	r20, r28
     444:	4f 5f       	subi	r20, 0xFF	; 255
     446:	5f 4f       	sbci	r21, 0xFF	; 255
     448:	66 e0       	ldi	r22, 0x06	; 6
     44a:	88 e6       	ldi	r24, 0x68	; 104
     44c:	ee d1       	rcall	.+988    	; 0x82a <i2c_write_addr>
		
	//Don't continue until transmission has finished
	while (i2c_status());	
     44e:	ea d1       	rcall	.+980    	; 0x824 <i2c_status>
     450:	81 11       	cpse	r24, r1
     452:	fd cf       	rjmp	.-6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     454:	8d ec       	ldi	r24, 0xCD	; 205
		
	//Month
	uint8_t month_value = ((month / 10) << 4) + (month % 10);
	
	// set century
	month_value |= (year/100) << 7;
     456:	f8 9e       	mul	r15, r24
     458:	81 2d       	mov	r24, r1
     45a:	11 24       	eor	r1, r1
     45c:	86 95       	lsr	r24
     45e:	86 95       	lsr	r24
     460:	86 95       	lsr	r24
     462:	28 2f       	mov	r18, r24
     464:	22 0f       	add	r18, r18
     466:	92 2f       	mov	r25, r18
     468:	99 0f       	add	r25, r25
     46a:	99 0f       	add	r25, r25
     46c:	92 0f       	add	r25, r18
     46e:	f9 1a       	sub	r15, r25
     470:	90 e1       	ldi	r25, 0x10	; 16
     472:	89 9f       	mul	r24, r25
     474:	f0 0c       	add	r15, r0
     476:	11 24       	eor	r1, r1
     478:	89 e2       	ldi	r24, 0x29	; 41
     47a:	18 9f       	mul	r17, r24
     47c:	11 2d       	mov	r17, r1
     47e:	11 24       	eor	r1, r1
     480:	12 95       	swap	r17
     482:	1f 70       	andi	r17, 0x0F	; 15
     484:	20 e8       	ldi	r18, 0x80	; 128
     486:	12 9f       	mul	r17, r18
     488:	c0 01       	movw	r24, r0
     48a:	11 24       	eor	r1, r1
     48c:	8f 29       	or	r24, r15
     48e:	8a 83       	std	Y+2, r24	; 0x02
     490:	21 e0       	ldi	r18, 0x01	; 1
	i2c_write_addr(SLAVE_ADDRESS, 0x05, &month_value, 1);
     492:	ae 01       	movw	r20, r28
     494:	4e 5f       	subi	r20, 0xFE	; 254
     496:	5f 4f       	sbci	r21, 0xFF	; 255
     498:	65 e0       	ldi	r22, 0x05	; 5
     49a:	88 e6       	ldi	r24, 0x68	; 104
     49c:	c6 d1       	rcall	.+908    	; 0x82a <i2c_write_addr>
		
	//Don't continue until transmission has finished
	while (i2c_status());
     49e:	c2 d1       	rcall	.+900    	; 0x824 <i2c_status>
     4a0:	81 11       	cpse	r24, r1
     4a2:	fd cf       	rjmp	.-6      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     4a4:	8d ec       	ldi	r24, 0xCD	; 205
		
	//Day
	uint8_t day_value = ((day / 10) << 4) + (day % 10);
     4a6:	08 9f       	mul	r16, r24
     4a8:	81 2d       	mov	r24, r1
     4aa:	11 24       	eor	r1, r1
     4ac:	86 95       	lsr	r24
     4ae:	86 95       	lsr	r24
     4b0:	86 95       	lsr	r24
     4b2:	28 2f       	mov	r18, r24
     4b4:	22 0f       	add	r18, r18
     4b6:	92 2f       	mov	r25, r18
     4b8:	99 0f       	add	r25, r25
     4ba:	99 0f       	add	r25, r25
     4bc:	92 0f       	add	r25, r18
     4be:	09 1b       	sub	r16, r25
     4c0:	90 e1       	ldi	r25, 0x10	; 16
     4c2:	89 9f       	mul	r24, r25
     4c4:	00 0d       	add	r16, r0
     4c6:	11 24       	eor	r1, r1
     4c8:	0b 83       	std	Y+3, r16	; 0x03
     4ca:	21 e0       	ldi	r18, 0x01	; 1
		
	i2c_write_addr(SLAVE_ADDRESS, 0x04, &day_value, 1);
     4cc:	ae 01       	movw	r20, r28
     4ce:	4d 5f       	subi	r20, 0xFD	; 253
     4d0:	5f 4f       	sbci	r21, 0xFF	; 255
     4d2:	64 e0       	ldi	r22, 0x04	; 4
     4d4:	88 e6       	ldi	r24, 0x68	; 104
     4d6:	a9 d1       	rcall	.+850    	; 0x82a <i2c_write_addr>
		
	//Don't continue until transmission has finished
	while (i2c_status());
     4d8:	a5 d1       	rcall	.+842    	; 0x824 <i2c_status>
     4da:	81 11       	cpse	r24, r1
     4dc:	fd cf       	rjmp	.-6      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4de:	0f 90       	pop	r0
}
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	08 95       	ret

000004f0 <RTC_read_time>:
     4f0:	cf 92       	push	r12

uint8_t RTC_read_time(uint8_t *hour_buffer, uint8_t *min_buffer, uint8_t *sec_buffer)
{
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	6c 01       	movw	r12, r24
     502:	7b 01       	movw	r14, r22
     504:	8a 01       	movw	r16, r20
	uint8_t *buffer = malloc(sizeof(uint8_t) * 3);
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	dd d4       	rcall	.+2490   	; 0xec6 <malloc>
     50c:	ec 01       	movw	r28, r24

	//Hour
	i2c_read_addr(SLAVE_ADDRESS, 0x02, &buffer[0], 1);
     50e:	21 e0       	ldi	r18, 0x01	; 1
     510:	ac 01       	movw	r20, r24
     512:	62 e0       	ldi	r22, 0x02	; 2
     514:	88 e6       	ldi	r24, 0x68	; 104

	//Don't continue until transmission has finished
	while (i2c_status());
     516:	a7 d1       	rcall	.+846    	; 0x866 <i2c_read_addr>
     518:	85 d1       	rcall	.+778    	; 0x824 <i2c_status>
     51a:	81 11       	cpse	r24, r1
     51c:	fd cf       	rjmp	.-6      	; 0x518 <RTC_read_time+0x28>
	*hour_buffer = ((buffer[0] >> 4) * 10) + (buffer[0] & 0x0f);
     51e:	fe 01       	movw	r30, r28
     520:	81 91       	ld	r24, Z+
     522:	af 01       	movw	r20, r30
     524:	98 2f       	mov	r25, r24
     526:	92 95       	swap	r25
     528:	9f 70       	andi	r25, 0x0F	; 15
     52a:	99 0f       	add	r25, r25
     52c:	29 2f       	mov	r18, r25
     52e:	22 0f       	add	r18, r18
     530:	22 0f       	add	r18, r18
     532:	92 0f       	add	r25, r18
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	89 0f       	add	r24, r25
     538:	f6 01       	movw	r30, r12
     53a:	80 83       	st	Z, r24
		
	//Minutes
	i2c_read_addr(SLAVE_ADDRESS, 0x01, &buffer[1], 1);
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	88 e6       	ldi	r24, 0x68	; 104
	
	//Don't continue until transmission has finished
	while (i2c_status());
     542:	91 d1       	rcall	.+802    	; 0x866 <i2c_read_addr>
     544:	6f d1       	rcall	.+734    	; 0x824 <i2c_status>
     546:	81 11       	cpse	r24, r1
     548:	fd cf       	rjmp	.-6      	; 0x544 <RTC_read_time+0x54>
	*min_buffer = ((buffer[1] >> 4) * 10) + (buffer[1] & 0x0f);
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	98 2f       	mov	r25, r24
     54e:	92 95       	swap	r25
     550:	9f 70       	andi	r25, 0x0F	; 15
     552:	99 0f       	add	r25, r25
     554:	29 2f       	mov	r18, r25
     556:	22 0f       	add	r18, r18
     558:	22 0f       	add	r18, r18
     55a:	92 0f       	add	r25, r18
     55c:	8f 70       	andi	r24, 0x0F	; 15
     55e:	89 0f       	add	r24, r25
     560:	f7 01       	movw	r30, r14
     562:	80 83       	st	Z, r24

	//Seconds
	i2c_read_addr(SLAVE_ADDRESS, 0x00, &buffer[2], 1);
     564:	21 e0       	ldi	r18, 0x01	; 1
     566:	ae 01       	movw	r20, r28
     568:	4e 5f       	subi	r20, 0xFE	; 254
     56a:	5f 4f       	sbci	r21, 0xFF	; 255
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	88 e6       	ldi	r24, 0x68	; 104
		
	//Don't continue until transmission has finished
	while (i2c_status());
     570:	7a d1       	rcall	.+756    	; 0x866 <i2c_read_addr>
     572:	58 d1       	rcall	.+688    	; 0x824 <i2c_status>
     574:	81 11       	cpse	r24, r1
     576:	fd cf       	rjmp	.-6      	; 0x572 <RTC_read_time+0x82>
	*sec_buffer = ((buffer[2] >> 4) * 10) + (buffer[2] & 0x0f);
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	98 2f       	mov	r25, r24
     57c:	92 95       	swap	r25
     57e:	9f 70       	andi	r25, 0x0F	; 15
     580:	99 0f       	add	r25, r25
     582:	29 2f       	mov	r18, r25
     584:	22 0f       	add	r18, r18
     586:	22 0f       	add	r18, r18
     588:	92 0f       	add	r25, r18
     58a:	8f 70       	andi	r24, 0x0F	; 15
     58c:	89 0f       	add	r24, r25
     58e:	f8 01       	movw	r30, r16
	
	free(buffer);
     590:	80 83       	st	Z, r24
     592:	ce 01       	movw	r24, r28
     594:	30 d5       	rcall	.+2656   	; 0xff6 <free>
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	08 95       	ret

000005a8 <RTC_read_date>:

uint8_t RTC_read_date(uint8_t *year_buffer, uint8_t *month_buffer, uint8_t *day_buffer)
{
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	6c 01       	movw	r12, r24
     5ba:	7b 01       	movw	r14, r22
     5bc:	8a 01       	movw	r16, r20
	uint8_t *buffer = malloc(sizeof(uint8_t) * 3);
     5be:	83 e0       	ldi	r24, 0x03	; 3
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	81 d4       	rcall	.+2306   	; 0xec6 <malloc>
     5c4:	ec 01       	movw	r28, r24

	// Year
	// read tens
	i2c_read_addr(SLAVE_ADDRESS, 0x06, &buffer[0], 1);
     5c6:	21 e0       	ldi	r18, 0x01	; 1
     5c8:	ac 01       	movw	r20, r24
     5ca:	66 e0       	ldi	r22, 0x06	; 6
     5cc:	88 e6       	ldi	r24, 0x68	; 104

	//Don't continue until transmission has finished
	while (i2c_status());
     5ce:	4b d1       	rcall	.+662    	; 0x866 <i2c_read_addr>
     5d0:	29 d1       	rcall	.+594    	; 0x824 <i2c_status>
     5d2:	81 11       	cpse	r24, r1
     5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <RTC_read_date+0x28>
	*year_buffer = ((buffer[0] >> 4) * 10) + (buffer[0] & 0x0f);
     5d6:	fe 01       	movw	r30, r28
     5d8:	81 91       	ld	r24, Z+
     5da:	af 01       	movw	r20, r30
     5dc:	98 2f       	mov	r25, r24
     5de:	92 95       	swap	r25
     5e0:	9f 70       	andi	r25, 0x0F	; 15
     5e2:	99 0f       	add	r25, r25
     5e4:	29 2f       	mov	r18, r25
     5e6:	22 0f       	add	r18, r18
     5e8:	22 0f       	add	r18, r18
     5ea:	92 0f       	add	r25, r18
     5ec:	8f 70       	andi	r24, 0x0F	; 15
     5ee:	89 0f       	add	r24, r25
     5f0:	f6 01       	movw	r30, r12
     5f2:	80 83       	st	Z, r24
		
	//Month
	i2c_read_addr(SLAVE_ADDRESS, 0x05, &buffer[1], 1);
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	65 e0       	ldi	r22, 0x05	; 5
     5f8:	88 e6       	ldi	r24, 0x68	; 104
		
	// Don't continue until transmission has finished
	while (i2c_status());
     5fa:	35 d1       	rcall	.+618    	; 0x866 <i2c_read_addr>
     5fc:	13 d1       	rcall	.+550    	; 0x824 <i2c_status>
     5fe:	81 11       	cpse	r24, r1
     600:	fd cf       	rjmp	.-6      	; 0x5fc <RTC_read_date+0x54>
	*month_buffer = (((buffer[1] & 0b00010000) >> 4) * 10) + (buffer[1] & 0x0f);
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	84 fb       	bst	r24, 4
     606:	99 27       	eor	r25, r25
     608:	90 f9       	bld	r25, 0
     60a:	99 0f       	add	r25, r25
     60c:	29 2f       	mov	r18, r25
     60e:	22 0f       	add	r18, r18
     610:	22 0f       	add	r18, r18
     612:	92 0f       	add	r25, r18
     614:	8f 70       	andi	r24, 0x0F	; 15
     616:	89 0f       	add	r24, r25
     618:	f7 01       	movw	r30, r14
     61a:	80 83       	st	Z, r24
	// Add century
	*year_buffer += (buffer[1] & 0b10000000) * 100;
	//Day
	i2c_read_addr(SLAVE_ADDRESS, 0x04, &buffer[2], 1);
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	ae 01       	movw	r20, r28
     620:	4e 5f       	subi	r20, 0xFE	; 254
     622:	5f 4f       	sbci	r21, 0xFF	; 255
     624:	64 e0       	ldi	r22, 0x04	; 4
     626:	88 e6       	ldi	r24, 0x68	; 104
		
	//Don't continue until transmission has finished
	while (i2c_status());
     628:	1e d1       	rcall	.+572    	; 0x866 <i2c_read_addr>
     62a:	fc d0       	rcall	.+504    	; 0x824 <i2c_status>
     62c:	81 11       	cpse	r24, r1
     62e:	fd cf       	rjmp	.-6      	; 0x62a <RTC_read_date+0x82>
	*day_buffer = ((buffer[2] >> 4) * 10) + (buffer[2] & 0x0f);
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	98 2f       	mov	r25, r24
     634:	92 95       	swap	r25
     636:	9f 70       	andi	r25, 0x0F	; 15
     638:	99 0f       	add	r25, r25
     63a:	29 2f       	mov	r18, r25
     63c:	22 0f       	add	r18, r18
     63e:	22 0f       	add	r18, r18
     640:	92 0f       	add	r25, r18
     642:	8f 70       	andi	r24, 0x0F	; 15
     644:	89 0f       	add	r24, r25
     646:	f8 01       	movw	r30, r16
	
	free(buffer);
     648:	80 83       	st	Z, r24
     64a:	ce 01       	movw	r24, r28
     64c:	d4 d4       	rcall	.+2472   	; 0xff6 <free>
}
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
     65c:	cf 90       	pop	r12
     65e:	08 95       	ret

00000660 <RTC_set_alarm>:


uint8_t RTC_set_alarm(uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t day, uint8_t dy_dt)
{
     660:	df 92       	push	r13
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	00 d0       	rcall	.+0      	; 0x670 <RTC_set_alarm+0x10>
     670:	00 d0       	rcall	.+0      	; 0x672 <RTC_set_alarm+0x12>
     672:	1f 92       	push	r1
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	e8 2e       	mov	r14, r24
     67a:	f6 2e       	mov	r15, r22
     67c:	14 2f       	mov	r17, r20
     67e:	d2 2e       	mov	r13, r18
	alarm_status = 0;
     680:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
	
	// Enable interrupts
	uint8_t INTCN = 0b00000101;
     684:	85 e0       	ldi	r24, 0x05	; 5
     686:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_write_addr(SLAVE_ADDRESS, 0x0E, &INTCN, 1);
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	ae 01       	movw	r20, r28
     68c:	4f 5f       	subi	r20, 0xFF	; 255
     68e:	5f 4f       	sbci	r21, 0xFF	; 255
     690:	6e e0       	ldi	r22, 0x0E	; 14
     692:	88 e6       	ldi	r24, 0x68	; 104
     694:	ca d0       	rcall	.+404    	; 0x82a <i2c_write_addr>
	
	// Don't continue until transmission has finished
	while (i2c_status());
     696:	c6 d0       	rcall	.+396    	; 0x824 <i2c_status>
     698:	81 11       	cpse	r24, r1
     69a:	fd cf       	rjmp	.-6      	; 0x696 <RTC_set_alarm+0x36>
     69c:	9d ec       	ldi	r25, 0xCD	; 205
	
	// Hour
	uint8_t hour_value = ((hours / 10) << 4) + (hours % 10);
	// set to 24-hr mode & clear alarm mask bit
	hour_value &= 0b10111111;
	hour_value &= 0b00111111;
     69e:	e9 9e       	mul	r14, r25
     6a0:	91 2d       	mov	r25, r1
     6a2:	11 24       	eor	r1, r1
     6a4:	96 95       	lsr	r25
     6a6:	96 95       	lsr	r25
     6a8:	96 95       	lsr	r25
     6aa:	29 2f       	mov	r18, r25
     6ac:	22 0f       	add	r18, r18
     6ae:	82 2f       	mov	r24, r18
     6b0:	88 0f       	add	r24, r24
     6b2:	88 0f       	add	r24, r24
     6b4:	82 0f       	add	r24, r18
     6b6:	e8 1a       	sub	r14, r24
     6b8:	8e 2d       	mov	r24, r14
     6ba:	20 e1       	ldi	r18, 0x10	; 16
     6bc:	92 9f       	mul	r25, r18
     6be:	80 0d       	add	r24, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	8f 73       	andi	r24, 0x3F	; 63
     6c4:	8a 83       	std	Y+2, r24	; 0x02
     6c6:	21 e0       	ldi	r18, 0x01	; 1
	i2c_write_addr(SLAVE_ADDRESS, 0x09, &hour_value, 1);
     6c8:	ae 01       	movw	r20, r28
     6ca:	4e 5f       	subi	r20, 0xFE	; 254
     6cc:	5f 4f       	sbci	r21, 0xFF	; 255
     6ce:	69 e0       	ldi	r22, 0x09	; 9
     6d0:	88 e6       	ldi	r24, 0x68	; 104
     6d2:	ab d0       	rcall	.+342    	; 0x82a <i2c_write_addr>
		
	// Don't continue until transmission has finished
	while (i2c_status());
     6d4:	a7 d0       	rcall	.+334    	; 0x824 <i2c_status>
     6d6:	81 11       	cpse	r24, r1
     6d8:	fd cf       	rjmp	.-6      	; 0x6d4 <RTC_set_alarm+0x74>
     6da:	9d ec       	ldi	r25, 0xCD	; 205
		
	// Minutes
	uint8_t min_value = ((minutes / 10) << 4) + (minutes % 10);
	// clear alarm mask bit
	min_value &= 0b01111111;
     6dc:	f9 9e       	mul	r15, r25
     6de:	91 2d       	mov	r25, r1
     6e0:	11 24       	eor	r1, r1
     6e2:	96 95       	lsr	r25
     6e4:	96 95       	lsr	r25
     6e6:	96 95       	lsr	r25
     6e8:	29 2f       	mov	r18, r25
     6ea:	22 0f       	add	r18, r18
     6ec:	82 2f       	mov	r24, r18
     6ee:	88 0f       	add	r24, r24
     6f0:	88 0f       	add	r24, r24
     6f2:	82 0f       	add	r24, r18
     6f4:	f8 1a       	sub	r15, r24
     6f6:	8f 2d       	mov	r24, r15
     6f8:	20 e1       	ldi	r18, 0x10	; 16
     6fa:	92 9f       	mul	r25, r18
     6fc:	80 0d       	add	r24, r0
     6fe:	11 24       	eor	r1, r1
     700:	8f 77       	andi	r24, 0x7F	; 127
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	21 e0       	ldi	r18, 0x01	; 1
	i2c_write_addr(SLAVE_ADDRESS, 0x08, &min_value, 1);
     706:	ae 01       	movw	r20, r28
     708:	4d 5f       	subi	r20, 0xFD	; 253
     70a:	5f 4f       	sbci	r21, 0xFF	; 255
     70c:	68 e0       	ldi	r22, 0x08	; 8
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	8c d0       	rcall	.+280    	; 0x82a <i2c_write_addr>
		
	// Don't continue until transmission has finished
	while (i2c_status());
     712:	88 d0       	rcall	.+272    	; 0x824 <i2c_status>
     714:	81 11       	cpse	r24, r1
     716:	fd cf       	rjmp	.-6      	; 0x712 <RTC_set_alarm+0xb2>
     718:	8d ec       	ldi	r24, 0xCD	; 205
		
	// Seconds
	uint8_t sec_value = ((seconds / 10) << 4) + (seconds % 10);
	// clear alarm mask bit
	sec_value &= 0b01111111;
     71a:	18 9f       	mul	r17, r24
     71c:	81 2d       	mov	r24, r1
     71e:	11 24       	eor	r1, r1
     720:	86 95       	lsr	r24
     722:	86 95       	lsr	r24
     724:	86 95       	lsr	r24
     726:	28 2f       	mov	r18, r24
     728:	22 0f       	add	r18, r18
     72a:	92 2f       	mov	r25, r18
     72c:	99 0f       	add	r25, r25
     72e:	99 0f       	add	r25, r25
     730:	92 0f       	add	r25, r18
     732:	19 1b       	sub	r17, r25
     734:	90 e1       	ldi	r25, 0x10	; 16
     736:	89 9f       	mul	r24, r25
     738:	10 0d       	add	r17, r0
     73a:	11 24       	eor	r1, r1
     73c:	1f 77       	andi	r17, 0x7F	; 127
     73e:	1c 83       	std	Y+4, r17	; 0x04
     740:	21 e0       	ldi	r18, 0x01	; 1
	i2c_write_addr(SLAVE_ADDRESS, 0x07, &sec_value, 1);
     742:	ae 01       	movw	r20, r28
     744:	4c 5f       	subi	r20, 0xFC	; 252
     746:	5f 4f       	sbci	r21, 0xFF	; 255
     748:	67 e0       	ldi	r22, 0x07	; 7
     74a:	88 e6       	ldi	r24, 0x68	; 104
     74c:	6e d0       	rcall	.+220    	; 0x82a <i2c_write_addr>
		
	// Don't continue until transmission has finished
	while (i2c_status());
     74e:	6a d0       	rcall	.+212    	; 0x824 <i2c_status>
     750:	81 11       	cpse	r24, r1
     752:	fd cf       	rjmp	.-6      	; 0x74e <RTC_set_alarm+0xee>
     754:	8d ec       	ldi	r24, 0xCD	; 205
	
 	uint8_t day_value = ((day / 10) << 4) + (day % 10);
 	
 	day_value ^= dy_dt << 6;
	day_value |= 0b10000000;
     756:	d8 9e       	mul	r13, r24
     758:	81 2d       	mov	r24, r1
     75a:	11 24       	eor	r1, r1
     75c:	86 95       	lsr	r24
     75e:	86 95       	lsr	r24
     760:	86 95       	lsr	r24
     762:	28 2f       	mov	r18, r24
     764:	22 0f       	add	r18, r18
     766:	92 2f       	mov	r25, r18
     768:	99 0f       	add	r25, r25
     76a:	99 0f       	add	r25, r25
     76c:	92 0f       	add	r25, r18
     76e:	d9 1a       	sub	r13, r25
     770:	20 e1       	ldi	r18, 0x10	; 16
     772:	82 9f       	mul	r24, r18
     774:	d0 0c       	add	r13, r0
     776:	11 24       	eor	r1, r1
     778:	80 e4       	ldi	r24, 0x40	; 64
     77a:	08 9f       	mul	r16, r24
     77c:	80 01       	movw	r16, r0
     77e:	11 24       	eor	r1, r1
     780:	0d 25       	eor	r16, r13
     782:	00 68       	ori	r16, 0x80	; 128
     784:	0d 83       	std	Y+5, r16	; 0x05
 	i2c_write_addr(SLAVE_ADDRESS, 0x0A, &day_value, 1);
     786:	21 e0       	ldi	r18, 0x01	; 1
     788:	ae 01       	movw	r20, r28
     78a:	4b 5f       	subi	r20, 0xFB	; 251
     78c:	5f 4f       	sbci	r21, 0xFF	; 255
     78e:	6a e0       	ldi	r22, 0x0A	; 10
     790:	88 e6       	ldi	r24, 0x68	; 104
     792:	4b d0       	rcall	.+150    	; 0x82a <i2c_write_addr>
     794:	47 d0       	rcall	.+142    	; 0x824 <i2c_status>
 	
	//Don't continue until transmission has finished
 	while (i2c_status());
     796:	81 11       	cpse	r24, r1
     798:	fd cf       	rjmp	.-6      	; 0x794 <RTC_set_alarm+0x134>
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
}
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	08 95       	ret

000007b4 <get_alarm_status>:
     7b4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 */

uint8_t get_alarm_status()
{
	return alarm_status;
}
     7b8:	08 95       	ret

000007ba <clear_alarm_status>:

void clear_alarm_status()
{
	alarm_status = 0;
     7ba:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
     7be:	08 95       	ret

000007c0 <__vector_3>:
}

ISR(INT2_vect)
{
     7c0:	1f 92       	push	r1
     7c2:	0f 92       	push	r0
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	0f 92       	push	r0
     7c8:	11 24       	eor	r1, r1
     7ca:	0b b6       	in	r0, 0x3b	; 59
     7cc:	0f 92       	push	r0
     7ce:	8f 93       	push	r24
     7d0:	ef 93       	push	r30
     7d2:	ff 93       	push	r31
	alarm_status = 1;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
	EICRA |= _BV(ISC21);
     7da:	e9 e6       	ldi	r30, 0x69	; 105
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	80 62       	ori	r24, 0x20	; 32
     7e2:	80 83       	st	Z, r24
	EIMSK |= _BV(INT2);
     7e4:	ea 9a       	sbi	0x1d, 2	; 29
     7e6:	ff 91       	pop	r31
     7e8:	ef 91       	pop	r30
     7ea:	8f 91       	pop	r24
     7ec:	0f 90       	pop	r0
     7ee:	0b be       	out	0x3b, r0	; 59
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <i2c_init>:
		read_max,
		counter;


uint8_t i2c_init(long scl)
{
     7fa:	9b 01       	movw	r18, r22
     7fc:	ac 01       	movw	r20, r24
	// Set prescaler value to 1
	TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
     7fe:	e9 eb       	ldi	r30, 0xB9	; 185
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	8c 7f       	andi	r24, 0xFC	; 252
     806:	80 83       	st	Z, r24
	
	// Set Bit Rate register to calculated value for given SCL
	TWBR = (uint8_t) (F_CPU/scl -16)/2;
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e8       	ldi	r23, 0x80	; 128
     80c:	80 e7       	ldi	r24, 0x70	; 112
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	04 d3       	rcall	.+1544   	; 0xe1a <__divmodsi4>
     812:	20 51       	subi	r18, 0x10	; 16
     814:	26 95       	lsr	r18
     816:	e8 eb       	ldi	r30, 0xB8	; 184
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	20 83       	st	Z, r18
	
	busy = TWI_NOT_BUSY;
     81c:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <busy>

	return TWBR;
     820:	80 81       	ld	r24, Z
}
     822:	08 95       	ret

00000824 <i2c_status>:
 */

uint8_t i2c_status()
{
	return busy;
}
     824:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <busy>
     828:	08 95       	ret

0000082a <i2c_write_addr>:
 * Write as Master Transmitter
 */

uint8_t i2c_write_addr(uint8_t device, uint8_t address, uint8_t *wr_data, uint8_t wr_count)
{
	busy = TWI_BUSY;
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <busy>

	slave_address = device;
     830:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <slave_address>
	register_address = address;
     834:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <register_address>
	wr_bytes = wr_data;
     838:	50 93 0e 02 	sts	0x020E, r21	; 0x80020e <wr_bytes+0x1>
     83c:	40 93 0d 02 	sts	0x020D, r20	; 0x80020d <wr_bytes>
	wr_bytes_count = wr_count;
     840:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <wr_bytes_count>
	
	//keep track of the current action that's being performed
	current_action = WRITING;
     844:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <current_action>
	
	// Initiate transmission
	TWCR = 1 << 7;
     848:	ec eb       	ldi	r30, 0xBC	; 188
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 e8       	ldi	r24, 0x80	; 128
     84e:	80 83       	st	Z, r24
	// Enable TWI (TWEN), Interrupt(TWIE)
	TWCR |= _BV(TWEN) | _BV(TWIE);
     850:	80 81       	ld	r24, Z
     852:	85 60       	ori	r24, 0x05	; 5
     854:	80 83       	st	Z, r24
	// Transmit START (TWSTA)
	TWCR |= _BV(TWSTA);
     856:	80 81       	ld	r24, Z
     858:	80 62       	ori	r24, 0x20	; 32
     85a:	80 83       	st	Z, r24
	
	// Clear Interrupt Flag (TWINT) to start transmission
	TWCR |= _BV(TWINT);
     85c:	80 81       	ld	r24, Z
     85e:	80 68       	ori	r24, 0x80	; 128
     860:	80 83       	st	Z, r24
	
	return 0;
}
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	08 95       	ret

00000866 <i2c_read_addr>:
 * Read as Master Receiver
 */

uint8_t i2c_read_addr(uint8_t device, uint8_t address, uint8_t *buffer, uint8_t max)
{
	busy = TWI_BUSY;
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <busy>

	
	slave_address = device;
     86c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <slave_address>
	register_address = address;
     870:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <register_address>
	read_buffer = buffer;
     874:	50 93 0a 02 	sts	0x020A, r21	; 0x80020a <read_buffer+0x1>
     878:	40 93 09 02 	sts	0x0209, r20	; 0x800209 <read_buffer>
	read_max = max;
     87c:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <read_max>
	counter = 0;
     880:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <counter>
		
	//keep track of the current action that's being performed
	current_action = READING;
     884:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <current_action>
		
	// Initiate transmission
	TWCR = 1 << 7;
     888:	ec eb       	ldi	r30, 0xBC	; 188
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 e8       	ldi	r24, 0x80	; 128
     88e:	80 83       	st	Z, r24
	// Enable TWI (TWEN), Interrupt(TWIE)
	TWCR |= TWCR_DEFAULT|  _BV(TWSTA);
     890:	80 81       	ld	r24, Z
     892:	85 66       	ori	r24, 0x65	; 101
     894:	80 83       	st	Z, r24

	return 0;
}
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	08 95       	ret

0000089a <__vector_39>:
/**
 * ISR covering relevant status codes
 */

ISR(TWI_vect)
{
     89a:	1f 92       	push	r1
     89c:	0f 92       	push	r0
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	0f 92       	push	r0
     8a2:	11 24       	eor	r1, r1
     8a4:	0b b6       	in	r0, 0x3b	; 59
     8a6:	0f 92       	push	r0
     8a8:	2f 93       	push	r18
     8aa:	8f 93       	push	r24
     8ac:	9f 93       	push	r25
     8ae:	ef 93       	push	r30
     8b0:	ff 93       	push	r31
	// Writing
	if (current_action == WRITING)
     8b2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <current_action>
     8b6:	81 11       	cpse	r24, r1
     8b8:	3d c0       	rjmp	.+122    	; 0x934 <__vector_39+0x9a>
	{
		switch (TWSR)
     8ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     8be:	88 31       	cpi	r24, 0x18	; 24
     8c0:	91 f0       	breq	.+36     	; 0x8e6 <__vector_39+0x4c>
     8c2:	88 32       	cpi	r24, 0x28	; 40
     8c4:	c1 f0       	breq	.+48     	; 0x8f6 <__vector_39+0x5c>
     8c6:	88 30       	cpi	r24, 0x08	; 8
     8c8:	09 f0       	breq	.+2      	; 0x8cc <__vector_39+0x32>
     8ca:	9c c0       	rjmp	.+312    	; 0xa04 <__vector_39+0x16a>
		{
			case (TW_START):
				// Send connection request to slave
				// Load SLA+W to TWDR
				// Slave address + W bit
				TWDR = 0;
     8cc:	eb eb       	ldi	r30, 0xBB	; 187
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	10 82       	st	Z, r1
				TWDR |= slave_address << 1;
     8d2:	90 81       	ld	r25, Z
     8d4:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <slave_address>
     8d8:	88 0f       	add	r24, r24
     8da:	89 2b       	or	r24, r25
     8dc:	80 83       	st	Z, r24

				// Make sure that Start bit is clear
				TWCR = TWCR_DEFAULT | _BV(TWINT);
     8de:	85 ec       	ldi	r24, 0xC5	; 197
     8e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

				break;
     8e4:	8f c0       	rjmp	.+286    	; 0xa04 <__vector_39+0x16a>
			
			case (TW_MT_SLA_ACK):
				// Select register address in the slave's memory space
				TWDR = register_address;
     8e6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <register_address>
     8ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				TWCR = TWCR_DEFAULT | _BV(TWINT);
     8ee:	85 ec       	ldi	r24, 0xC5	; 197
     8f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				break;
     8f4:	87 c0       	rjmp	.+270    	; 0xa04 <__vector_39+0x16a>
			
			case (TW_MT_DATA_ACK):	
				if ((wr_bytes_count - 1 < 0))
     8f6:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <wr_bytes_count>
     8fa:	82 2f       	mov	r24, r18
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	32 f4       	brpl	.+12     	; 0x90e <__vector_39+0x74>
				{
					// Stop transmission
					TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTO);
     902:	85 ed       	ldi	r24, 0xD5	; 213
     904:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
					busy = TWI_NOT_BUSY;
     908:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <busy>
					break;
     90c:	7b c0       	rjmp	.+246    	; 0xa04 <__vector_39+0x16a>
				}

				// Load bytes to be transmitted, one at a time
				TWDR = wr_bytes[(wr_bytes_count -1)];
     90e:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <wr_bytes>
     912:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <wr_bytes+0x1>
     916:	e2 0f       	add	r30, r18
     918:	f1 1d       	adc	r31, r1
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	80 81       	ld	r24, Z
     91e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				wr_bytes_count--;
     922:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <wr_bytes_count>
     926:	81 50       	subi	r24, 0x01	; 1
     928:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <wr_bytes_count>
				TWCR = TWCR_DEFAULT | _BV(TWINT);
     92c:	85 ec       	ldi	r24, 0xC5	; 197
     92e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				break;
     932:	68 c0       	rjmp	.+208    	; 0xa04 <__vector_39+0x16a>
		}
	} 
	else
	// Reading
	{
		switch (TWSR)
     934:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     938:	88 32       	cpi	r24, 0x28	; 40
     93a:	39 f1       	breq	.+78     	; 0x98a <__vector_39+0xf0>
     93c:	40 f4       	brcc	.+16     	; 0x94e <__vector_39+0xb4>
     93e:	80 31       	cpi	r24, 0x10	; 16
     940:	41 f1       	breq	.+80     	; 0x992 <__vector_39+0xf8>
     942:	88 31       	cpi	r24, 0x18	; 24
     944:	d1 f0       	breq	.+52     	; 0x97a <__vector_39+0xe0>
     946:	88 30       	cpi	r24, 0x08	; 8
     948:	09 f0       	breq	.+2      	; 0x94c <__vector_39+0xb2>
     94a:	5c c0       	rjmp	.+184    	; 0xa04 <__vector_39+0x16a>
     94c:	09 c0       	rjmp	.+18     	; 0x960 <__vector_39+0xc6>
     94e:	80 35       	cpi	r24, 0x50	; 80
     950:	b1 f1       	breq	.+108    	; 0x9be <__vector_39+0x124>
     952:	88 35       	cpi	r24, 0x58	; 88
     954:	09 f4       	brne	.+2      	; 0x958 <__vector_39+0xbe>
     956:	51 c0       	rjmp	.+162    	; 0x9fa <__vector_39+0x160>
     958:	80 34       	cpi	r24, 0x40	; 64
     95a:	09 f0       	breq	.+2      	; 0x95e <__vector_39+0xc4>
     95c:	53 c0       	rjmp	.+166    	; 0xa04 <__vector_39+0x16a>
     95e:	27 c0       	rjmp	.+78     	; 0x9ae <__vector_39+0x114>
		{
			case (TW_START):
				// Send connection request to slave
				// Load SLA+W to TWDR
				// Slave address + W bit
				TWDR = 0;
     960:	eb eb       	ldi	r30, 0xBB	; 187
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	10 82       	st	Z, r1
				TWDR |= slave_address << 1;
     966:	90 81       	ld	r25, Z
     968:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <slave_address>
     96c:	88 0f       	add	r24, r24
     96e:	89 2b       	or	r24, r25
     970:	80 83       	st	Z, r24

				// Make sure that Start bit is clear
				TWCR = TWCR_DEFAULT | _BV(TWINT);
     972:	85 ec       	ldi	r24, 0xC5	; 197
     974:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				break;
     978:	45 c0       	rjmp	.+138    	; 0xa04 <__vector_39+0x16a>
			
			case (TW_MT_SLA_ACK):
				// Select register address in the slave's memory space
				TWDR = register_address;
     97a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <register_address>
     97e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				TWCR = TWCR_DEFAULT | _BV(TWINT);
     982:	85 ec       	ldi	r24, 0xC5	; 197
     984:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				break;
     988:	3d c0       	rjmp	.+122    	; 0xa04 <__vector_39+0x16a>
			
			case (TW_MT_DATA_ACK):
				// Initiate repeated start
				TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
     98a:	85 ee       	ldi	r24, 0xE5	; 229
     98c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				break;
     990:	39 c0       	rjmp	.+114    	; 0xa04 <__vector_39+0x16a>
	
			case (TW_REP_START):
				// Send connection request to slave
				// Load SLA+W to TWDR
				// Slave address + R bit
				TWDR = 1;
     992:	eb eb       	ldi	r30, 0xBB	; 187
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	80 83       	st	Z, r24
				TWDR |= slave_address << 1;
     99a:	90 81       	ld	r25, Z
     99c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <slave_address>
     9a0:	88 0f       	add	r24, r24
     9a2:	89 2b       	or	r24, r25
     9a4:	80 83       	st	Z, r24
				TWCR = TWCR_DEFAULT | _BV(TWINT);
     9a6:	85 ec       	ldi	r24, 0xC5	; 197
     9a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				break;
     9ac:	2b c0       	rjmp	.+86     	; 0xa04 <__vector_39+0x16a>
			
			case (TW_MR_SLA_ACK):
				// Select register address in the slave's memory space
				TWDR = register_address;
     9ae:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <register_address>
     9b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				TWCR = TWCR_DEFAULT | _BV(TWINT);
     9b6:	85 ec       	ldi	r24, 0xC5	; 197
     9b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				break;
     9bc:	23 c0       	rjmp	.+70     	; 0xa04 <__vector_39+0x16a>
			
			case (TW_MR_DATA_ACK):
				// Load bytes to be read, one at a time
				read_buffer[counter] = TWDR;
     9be:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <counter>
     9c2:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     9c6:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <read_buffer>
     9ca:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <read_buffer+0x1>
     9ce:	e8 0f       	add	r30, r24
     9d0:	f1 1d       	adc	r31, r1
     9d2:	90 83       	st	Z, r25
				counter++;
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <counter>
				read_max--;
     9da:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <read_max>
     9de:	81 50       	subi	r24, 0x01	; 1
     9e0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <read_max>
				if (read_max - 1 < 0)
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	22 f4       	brpl	.+8      	; 0x9f2 <__vector_39+0x158>
				{
					// Stop transmission
					TWCR = TWCR_NOT_ACK;
     9ea:	85 e8       	ldi	r24, 0x85	; 133
     9ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
					break;
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <__vector_39+0x16a>
				}
				TWCR = TWCR_DEFAULT | _BV(TWINT);
     9f2:	85 ec       	ldi	r24, 0xC5	; 197
     9f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				break;
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <__vector_39+0x16a>
			
			case (TW_MR_DATA_NACK):
				TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTO);
     9fa:	85 ed       	ldi	r24, 0xD5	; 213
     9fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
				busy = TWI_NOT_BUSY;
     a00:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <busy>
				
			default:
				break;
		}
	}
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	2f 91       	pop	r18
     a0e:	0f 90       	pop	r0
     a10:	0b be       	out	0x3b, r0	; 59
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <init_keyboard>:
#include <avr/io.h>

void init_keyboard()
{
	//Enables pull-ups on Columns
	PORTJ |= 0b00001111;
     a1c:	e5 e0       	ldi	r30, 0x05	; 5
     a1e:	f1 e0       	ldi	r31, 0x01	; 1
     a20:	80 81       	ld	r24, Z
     a22:	8f 60       	ori	r24, 0x0F	; 15
     a24:	80 83       	st	Z, r24
     a26:	08 95       	ret

00000a28 <getCh>:
}



int8_t getCh()
{
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
	uint8_t row, col;
	DDRJ = 0;
     a2c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
	for(row=0;row<4;row++)
	{
		//Set the (4-c) row to high
		DDRJ =(0b10000000>>row);
     a34:	c0 e8       	ldi	r28, 0x80	; 128
     a36:	d0 e0       	ldi	r29, 0x00	; 0
     a38:	a4 e0       	ldi	r26, 0x04	; 4
     a3a:	b1 e0       	ldi	r27, 0x01	; 1
		
		for(col=0;col<4;col++)
		{
			//Determine which column pin is pulled LOW with a bitwise mask
			if(!(PINJ & (0b00001000>>col)))
     a3c:	e3 e0       	ldi	r30, 0x03	; 3
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	62 2f       	mov	r22, r18
	uint8_t row, col;
	DDRJ = 0;
	for(row=0;row<4;row++)
	{
		//Set the (4-c) row to high
		DDRJ =(0b10000000>>row);
     a42:	ae 01       	movw	r20, r28
     a44:	02 2e       	mov	r0, r18
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <getCh+0x24>
     a48:	55 95       	asr	r21
     a4a:	47 95       	ror	r20
     a4c:	0a 94       	dec	r0
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <getCh+0x20>
     a50:	4c 93       	st	X, r20
		
		for(col=0;col<4;col++)
		{
			//Determine which column pin is pulled LOW with a bitwise mask
			if(!(PINJ & (0b00001000>>col)))
     a52:	90 81       	ld	r25, Z
     a54:	93 ff       	sbrs	r25, 3
     a56:	0f c0       	rjmp	.+30     	; 0xa76 <getCh+0x4e>
     a58:	90 81       	ld	r25, Z
     a5a:	92 ff       	sbrs	r25, 2
     a5c:	08 c0       	rjmp	.+16     	; 0xa6e <getCh+0x46>
     a5e:	90 81       	ld	r25, Z
     a60:	91 ff       	sbrs	r25, 1
     a62:	07 c0       	rjmp	.+14     	; 0xa72 <getCh+0x4a>
     a64:	90 81       	ld	r25, Z
     a66:	90 fd       	sbrc	r25, 0
     a68:	0b c0       	rjmp	.+22     	; 0xa80 <getCh+0x58>
	for(row=0;row<4;row++)
	{
		//Set the (4-c) row to high
		DDRJ =(0b10000000>>row);
		
		for(col=0;col<4;col++)
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <getCh+0x50>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	03 c0       	rjmp	.+6      	; 0xa78 <getCh+0x50>
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <getCh+0x50>
     a76:	80 e0       	ldi	r24, 0x00	; 0
		{
			//Determine which column pin is pulled LOW with a bitwise mask
			if(!(PINJ & (0b00001000>>col)))
			{
				return (char) (row*4+col);
     a78:	66 0f       	add	r22, r22
     a7a:	66 0f       	add	r22, r22
     a7c:	86 0f       	add	r24, r22
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <getCh+0x64>
     a80:	2f 5f       	subi	r18, 0xFF	; 255
     a82:	3f 4f       	sbci	r19, 0xFF	; 255

int8_t getCh()
{
	uint8_t row, col;
	DDRJ = 0;
	for(row=0;row<4;row++)
     a84:	24 30       	cpi	r18, 0x04	; 4
     a86:	31 05       	cpc	r19, r1
     a88:	d9 f6       	brne	.-74     	; 0xa40 <getCh+0x18>
				return (char) (row*4+col);
			}
		}
	}

	return -1;
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <switch_selection>:
    }
}

void switch_selection()
{
	switch (format)
     a92:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <format>
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	e1 f0       	breq	.+56     	; 0xad2 <switch_selection+0x40>
     a9a:	30 f0       	brcs	.+12     	; 0xaa8 <switch_selection+0x16>
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	71 f1       	breq	.+92     	; 0xafc <switch_selection+0x6a>
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <switch_selection+0x14>
     aa4:	40 c0       	rjmp	.+128    	; 0xb26 <switch_selection+0x94>
     aa6:	08 95       	ret
	{
		case FORMAT_MM_SS:
			if (selected == &seconds)
     aa8:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <selected>
     aac:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <selected+0x1>
     ab0:	8d 51       	subi	r24, 0x1D	; 29
     ab2:	92 40       	sbci	r25, 0x02	; 2
     ab4:	39 f4       	brne	.+14     	; 0xac4 <switch_selection+0x32>
				selected = &minutes;
     ab6:	83 e2       	ldi	r24, 0x23	; 35
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <selected+0x1>
     abe:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <selected>
     ac2:	08 95       	ret
			else
				selected = &seconds;
     ac4:	8d e1       	ldi	r24, 0x1D	; 29
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <selected+0x1>
     acc:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <selected>
     ad0:	08 95       	ret
			break;
		
		case FORMAT_HH_MM:
			if (selected == &minutes)
     ad2:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <selected>
     ad6:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <selected+0x1>
     ada:	83 52       	subi	r24, 0x23	; 35
     adc:	92 40       	sbci	r25, 0x02	; 2
     ade:	39 f4       	brne	.+14     	; 0xaee <switch_selection+0x5c>
				selected = &hours;
     ae0:	86 e2       	ldi	r24, 0x26	; 38
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <selected+0x1>
     ae8:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <selected>
     aec:	08 95       	ret
			else
				selected = &minutes;
     aee:	83 e2       	ldi	r24, 0x23	; 35
     af0:	92 e0       	ldi	r25, 0x02	; 2
     af2:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <selected+0x1>
     af6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <selected>
     afa:	08 95       	ret
			break;
		
		case FORMAT_MM_DD:
			if (selected == &day)
     afc:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <selected>
     b00:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <selected+0x1>
     b04:	82 52       	subi	r24, 0x22	; 34
     b06:	92 40       	sbci	r25, 0x02	; 2
     b08:	39 f4       	brne	.+14     	; 0xb18 <switch_selection+0x86>
				selected = &month;
     b0a:	87 e1       	ldi	r24, 0x17	; 23
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <selected+0x1>
     b12:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <selected>
     b16:	08 95       	ret
			else
				selected = &day;
     b18:	82 e2       	ldi	r24, 0x22	; 34
     b1a:	92 e0       	ldi	r25, 0x02	; 2
     b1c:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <selected+0x1>
     b20:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <selected>
     b24:	08 95       	ret
			break;
		
		case FORMAT_YYYY:
			selected = &year;
     b26:	81 e2       	ldi	r24, 0x21	; 33
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <selected+0x1>
     b2e:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <selected>
     b32:	08 95       	ret

00000b34 <main>:
bool editMode;

void switch_selection();

int main(void)
{
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	1f 92       	push	r1
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	//Driver initialization
	i2c_init(50000);
     b3e:	60 e5       	ldi	r22, 0x50	; 80
     b40:	73 ec       	ldi	r23, 0xC3	; 195
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	59 de       	rcall	.-846    	; 0x7fa <i2c_init>
	init_7_segment();
     b48:	f4 da       	rcall	.-2584   	; 0x132 <init_7_segment>
	init_keyboard();
     b4a:	68 df       	rcall	.-304    	; 0xa1c <init_keyboard>
     b4c:	52 98       	cbi	0x0a, 2	; 10
	
	DDRD &= ~(_BV(DDD2));
     b4e:	e9 e6       	ldi	r30, 0x69	; 105

	EICRA |= _BV(ISC21);
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	80 62       	ori	r24, 0x20	; 32
     b56:	80 83       	st	Z, r24
     b58:	ea 9a       	sbi	0x1d, 2	; 29
	EIMSK |= _BV(INT2);
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
	
	

	lastPressed = 255;
     b5c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <lastPressed>
     b60:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <lastPrinted+0x1>
	lastPrinted = 0;
     b64:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <lastPrinted>
     b68:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <currentKey>
	currentKey  = 0;
     b6c:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <format>
	format = 0;
     b70:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <currentReading+0x1>
	currentReading = 0;
     b74:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <currentReading>
     b78:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <editMode>
    editMode = false;

	selected = malloc(sizeof(uint8_t));
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a2 d1       	rcall	.+836    	; 0xec6 <malloc>
     b82:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <selected+0x1>
     b86:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <selected>
     b8a:	87 e1       	ldi	r24, 0x17	; 23
	
	hours = 23;
     b8c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <hours>
     b90:	80 e2       	ldi	r24, 0x20	; 32
	minutes = 32;
     b92:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <minutes>
     b96:	82 e3       	ldi	r24, 0x32	; 50
	seconds = 50;
     b98:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <seconds>
     b9c:	83 e1       	ldi	r24, 0x13	; 19
	
	year = 19;
     b9e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <year>
     ba2:	8b e0       	ldi	r24, 0x0B	; 11
	month = 11;
     ba4:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <month>
     ba8:	8b e1       	ldi	r24, 0x1B	; 27
	day = 27;
     baa:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <day>
     bae:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <temp>
	temp = 0;
     bb2:	78 94       	sei
	uint8_t buffer;

	sei();
     bb4:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <seconds>

	RTC_set_alarm(hours, minutes, seconds+5, day, 0);
     bb8:	4b 5f       	subi	r20, 0xFB	; 251
     bba:	00 e0       	ldi	r16, 0x00	; 0
     bbc:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <day>
     bc0:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <minutes>
     bc4:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <hours>
     bc8:	4b dd       	rcall	.-1386   	; 0x660 <RTC_set_alarm>
     bca:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <seconds>
	RTC_set_time(hours, minutes, seconds);
     bce:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <minutes>
     bd2:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <hours>
     bd6:	a9 db       	rcall	.-2222   	; 0x32a <RTC_set_time>
     bd8:	40 91 22 02 	lds	r20, 0x0222	; 0x800222 <day>
	RTC_set_date(year, month, day);
     bdc:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <month>
     be0:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <year>
     be4:	0c dc       	rcall	.-2024   	; 0x3fe <RTC_set_date>
					printint_7_segment(lastPrinted);
				}
				break;
			
			case FORMAT_HH_MM:
				currentReading = hours*100 + minutes;
     be6:	14 e6       	ldi	r17, 0x64	; 100
	
	
	
    while (1) 
    {	
		if (get_alarm_status())
     be8:	e5 dd       	rcall	.-1078   	; 0x7b4 <get_alarm_status>
     bea:	88 23       	and	r24, r24
     bec:	09 f4       	brne	.+2      	; 0xbf0 <main+0xbc>
     bee:	3f c0       	rjmp	.+126    	; 0xc6e <main+0x13a>
		{
			
						// Clear interrupt trigger
			i2c_read_addr(SLAVE_ADDRESS, 0x0F, &buffer, 1);
     bf0:	21 e0       	ldi	r18, 0x01	; 1
     bf2:	ae 01       	movw	r20, r28
     bf4:	4f 5f       	subi	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	6f e0       	ldi	r22, 0x0F	; 15
     bfa:	88 e6       	ldi	r24, 0x68	; 104
     bfc:	34 de       	rcall	.-920    	; 0x866 <i2c_read_addr>
     bfe:	12 de       	rcall	.-988    	; 0x824 <i2c_status>
	
			// Don't continue until transmission has finished
			while (i2c_status());
     c00:	81 11       	cpse	r24, r1
     c02:	fd cf       	rjmp	.-6      	; 0xbfe <main+0xca>
			
			i2c_read_addr(SLAVE_ADDRESS, 0x0E, &buffer, 1);
     c04:	21 e0       	ldi	r18, 0x01	; 1
     c06:	ae 01       	movw	r20, r28
     c08:	4f 5f       	subi	r20, 0xFF	; 255
     c0a:	5f 4f       	sbci	r21, 0xFF	; 255
     c0c:	6e e0       	ldi	r22, 0x0E	; 14
     c0e:	88 e6       	ldi	r24, 0x68	; 104
	
			// Don't continue until transmission has finished
			while (i2c_status());
     c10:	2a de       	rcall	.-940    	; 0x866 <i2c_read_addr>
     c12:	08 de       	rcall	.-1008   	; 0x824 <i2c_status>
     c14:	81 11       	cpse	r24, r1
			
			
			// Clear interrupt trigger
			i2c_write_addr(SLAVE_ADDRESS, 0x0F, &temp, 1);
     c16:	fd cf       	rjmp	.-6      	; 0xc12 <main+0xde>
     c18:	21 e0       	ldi	r18, 0x01	; 1
     c1a:	48 e1       	ldi	r20, 0x18	; 24
     c1c:	52 e0       	ldi	r21, 0x02	; 2
     c1e:	6f e0       	ldi	r22, 0x0F	; 15
     c20:	88 e6       	ldi	r24, 0x68	; 104
	
			// Don't continue until transmission has finished
			while (i2c_status());
     c22:	03 de       	rcall	.-1018   	; 0x82a <i2c_write_addr>
     c24:	ff dd       	rcall	.-1026   	; 0x824 <i2c_status>
     c26:	81 11       	cpse	r24, r1
     c28:	fd cf       	rjmp	.-6      	; 0xc24 <main+0xf0>
			

			
			clear_alarm_status();
     c2a:	c7 dd       	rcall	.-1138   	; 0x7ba <clear_alarm_status>
     c2c:	81 e6       	ldi	r24, 0x61	; 97
			
			printint_7_segment(7777);
     c2e:	9e e1       	ldi	r25, 0x1E	; 30
     c30:	cb da       	rcall	.-2666   	; 0x1c8 <printint_7_segment>
     c32:	2f e7       	ldi	r18, 0x7F	; 127
     c34:	84 e8       	ldi	r24, 0x84	; 132
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c36:	9e e1       	ldi	r25, 0x1E	; 30
     c38:	21 50       	subi	r18, 0x01	; 1
     c3a:	80 40       	sbci	r24, 0x00	; 0
     c3c:	90 40       	sbci	r25, 0x00	; 0
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <main+0x104>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <main+0x10e>
     c42:	00 00       	nop
     c44:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <seconds>
			_delay_ms(10000);
			RTC_set_alarm(hours, minutes, seconds+5, day, 0);
     c48:	4b 5f       	subi	r20, 0xFB	; 251
     c4a:	00 e0       	ldi	r16, 0x00	; 0
     c4c:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <day>
     c50:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <minutes>
     c54:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <hours>
			
			i2c_read_addr(SLAVE_ADDRESS, 0x0E, &buffer, 1);
     c58:	03 dd       	rcall	.-1530   	; 0x660 <RTC_set_alarm>
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	ae 01       	movw	r20, r28
     c5e:	4f 5f       	subi	r20, 0xFF	; 255
     c60:	5f 4f       	sbci	r21, 0xFF	; 255
     c62:	6e e0       	ldi	r22, 0x0E	; 14
     c64:	88 e6       	ldi	r24, 0x68	; 104
     c66:	ff dd       	rcall	.-1026   	; 0x866 <i2c_read_addr>
	
			// Don't continue until transmission has finished
			while (i2c_status());
     c68:	dd dd       	rcall	.-1094   	; 0x824 <i2c_status>
     c6a:	81 11       	cpse	r24, r1
     c6c:	fd cf       	rjmp	.-6      	; 0xc68 <main+0x134>
     c6e:	dc de       	rcall	.-584    	; 0xa28 <getCh>
		}
		
		// Display Format
		currentKey = getCh();
     c70:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <currentKey>
     c74:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <lastPressed>
		if (lastPressed != currentKey)
     c78:	89 17       	cp	r24, r25
     c7a:	09 f4       	brne	.+2      	; 0xc7e <main+0x14a>
     c7c:	49 c0       	rjmp	.+146    	; 0xd10 <main+0x1dc>
     c7e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <lastPressed>
		{
			lastPressed = currentKey;
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	a1 f1       	breq	.+104    	; 0xcee <main+0x1ba>
			switch (lastPressed)
     c86:	2c f4       	brge	.+10     	; 0xc92 <main+0x15e>
     c88:	88 23       	and	r24, r24
     c8a:	41 f0       	breq	.+16     	; 0xc9c <main+0x168>
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	b1 f0       	breq	.+44     	; 0xcbc <main+0x188>
     c90:	3f c0       	rjmp	.+126    	; 0xd10 <main+0x1dc>
     c92:	83 30       	cpi	r24, 0x03	; 3
     c94:	a1 f1       	breq	.+104    	; 0xcfe <main+0x1ca>
     c96:	84 30       	cpi	r24, 0x04	; 4
     c98:	d1 f1       	breq	.+116    	; 0xd0e <main+0x1da>
     c9a:	3a c0       	rjmp	.+116    	; 0xd10 <main+0x1dc>
     c9c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <format>
			{
				case KEY_FORMAT:
					if (format >= 3)
     ca0:	83 30       	cpi	r24, 0x03	; 3
     ca2:	18 f0       	brcs	.+6      	; 0xcaa <main+0x176>
     ca4:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <format>
						format = 0;
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <main+0x17c>
     caa:	8f 5f       	subi	r24, 0xFF	; 255
					else
						format++;
     cac:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <format>
     cb0:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <editMode>
					if (editMode)
     cb4:	88 23       	and	r24, r24
     cb6:	81 f1       	breq	.+96     	; 0xd18 <main+0x1e4>
						switch_selection();
     cb8:	ec de       	rcall	.-552    	; 0xa92 <switch_selection>
     cba:	2a c0       	rjmp	.+84     	; 0xd10 <main+0x1dc>
     cbc:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <editMode>
					break;
					
				case KEY_EDIT:
					if (!editMode)
     cc0:	81 11       	cpse	r24, r1
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <main+0x198>
						editMode = true;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <editMode>
     cca:	34 c0       	rjmp	.+104    	; 0xd34 <main+0x200>
					else
					{
						RTC_set_time(hours, minutes, seconds);
     ccc:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <seconds>
     cd0:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <minutes>
     cd4:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <hours>
     cd8:	28 db       	rcall	.-2480   	; 0x32a <RTC_set_time>
     cda:	40 91 22 02 	lds	r20, 0x0222	; 0x800222 <day>
						RTC_set_date(year, month, day);
     cde:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <month>
     ce2:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <year>
     ce6:	8b db       	rcall	.-2282   	; 0x3fe <RTC_set_date>
     ce8:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <editMode>
						editMode = false;
     cec:	15 c0       	rjmp	.+42     	; 0xd18 <main+0x1e4>
     cee:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <selected>
					}
					break;
					
				case KEY_INCREMENT:
					(*selected)++;
     cf2:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <selected+0x1>
     cf6:	80 81       	ld	r24, Z
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	80 83       	st	Z, r24
					break;
     cfc:	09 c0       	rjmp	.+18     	; 0xd10 <main+0x1dc>
					
				case KEY_DECREMENT:
					(*selected)--;
     cfe:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <selected>
     d02:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <selected+0x1>
     d06:	80 81       	ld	r24, Z
     d08:	81 50       	subi	r24, 0x01	; 1
					break;
     d0a:	80 83       	st	Z, r24
					
				case KEY_SWITCH:
					switch_selection();
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <main+0x1dc>
     d0e:	c1 de       	rcall	.-638    	; 0xa92 <switch_selection>
			}
		}
		
				
		// Edit mode
		if (editMode)
     d10:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <editMode>
     d14:	81 11       	cpse	r24, r1
     d16:	0e c0       	rjmp	.+28     	; 0xd34 <main+0x200>
		}
		// Read mode
		else
		{
					
			RTC_read_date(&year, &month, &day);
     d18:	42 e2       	ldi	r20, 0x22	; 34
     d1a:	52 e0       	ldi	r21, 0x02	; 2
     d1c:	67 e1       	ldi	r22, 0x17	; 23
     d1e:	72 e0       	ldi	r23, 0x02	; 2
     d20:	81 e2       	ldi	r24, 0x21	; 33
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	41 dc       	rcall	.-1918   	; 0x5a8 <RTC_read_date>
     d26:	4d e1       	ldi	r20, 0x1D	; 29
			RTC_read_time(&hours, &minutes, &seconds);
     d28:	52 e0       	ldi	r21, 0x02	; 2
     d2a:	63 e2       	ldi	r22, 0x23	; 35
     d2c:	72 e0       	ldi	r23, 0x02	; 2
     d2e:	86 e2       	ldi	r24, 0x26	; 38
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	de db       	rcall	.-2116   	; 0x4f0 <RTC_read_time>
     d34:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <format>
		}
		
		switch (format)
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	11 f1       	breq	.+68     	; 0xd80 <main+0x24c>
     d3c:	30 f0       	brcs	.+12     	; 0xd4a <main+0x216>
     d3e:	82 30       	cpi	r24, 0x02	; 2
     d40:	d1 f1       	breq	.+116    	; 0xdb6 <main+0x282>
     d42:	83 30       	cpi	r24, 0x03	; 3
     d44:	09 f4       	brne	.+2      	; 0xd48 <main+0x214>
     d46:	52 c0       	rjmp	.+164    	; 0xdec <main+0x2b8>
     d48:	4f cf       	rjmp	.-354    	; 0xbe8 <main+0xb4>
     d4a:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <minutes>
		{
			case FORMAT_MM_SS:
				currentReading = minutes*100 + seconds;
     d4e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <seconds>
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	12 9f       	mul	r17, r18
     d56:	80 0d       	add	r24, r0
     d58:	91 1d       	adc	r25, r1
     d5a:	11 24       	eor	r1, r1
     d5c:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <currentReading+0x1>
     d60:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <currentReading>
     d64:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <lastPrinted>
				if (lastPrinted != currentReading)
     d68:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <lastPrinted+0x1>
     d6c:	82 17       	cp	r24, r18
     d6e:	93 07       	cpc	r25, r19
     d70:	09 f4       	brne	.+2      	; 0xd74 <main+0x240>
     d72:	3a cf       	rjmp	.-396    	; 0xbe8 <main+0xb4>
     d74:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lastPrinted+0x1>
				{
					lastPrinted = currentReading;
     d78:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <lastPrinted>
     d7c:	25 da       	rcall	.-2998   	; 0x1c8 <printint_7_segment>
					printint_7_segment(lastPrinted);
     d7e:	34 cf       	rjmp	.-408    	; 0xbe8 <main+0xb4>
     d80:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <hours>
				}
				break;
			
			case FORMAT_HH_MM:
				currentReading = hours*100 + minutes;
     d84:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <minutes>
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	12 9f       	mul	r17, r18
     d8c:	80 0d       	add	r24, r0
     d8e:	91 1d       	adc	r25, r1
     d90:	11 24       	eor	r1, r1
     d92:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <currentReading+0x1>
     d96:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <currentReading>
     d9a:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <lastPrinted>
				if (lastPrinted != currentReading)
     d9e:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <lastPrinted+0x1>
     da2:	82 17       	cp	r24, r18
     da4:	93 07       	cpc	r25, r19
     da6:	09 f4       	brne	.+2      	; 0xdaa <main+0x276>
     da8:	1f cf       	rjmp	.-450    	; 0xbe8 <main+0xb4>
     daa:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lastPrinted+0x1>
				{
					lastPrinted = currentReading;
     dae:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <lastPrinted>
     db2:	0a da       	rcall	.-3052   	; 0x1c8 <printint_7_segment>
					printint_7_segment(lastPrinted);
     db4:	19 cf       	rjmp	.-462    	; 0xbe8 <main+0xb4>
     db6:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <month>
				}
				break;
			
			case FORMAT_MM_DD:
				currentReading = month*100 + day;
     dba:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <day>
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	12 9f       	mul	r17, r18
     dc2:	80 0d       	add	r24, r0
     dc4:	91 1d       	adc	r25, r1
     dc6:	11 24       	eor	r1, r1
     dc8:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <currentReading+0x1>
     dcc:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <currentReading>
     dd0:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <lastPrinted>
				if (lastPrinted != currentReading)
     dd4:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <lastPrinted+0x1>
     dd8:	82 17       	cp	r24, r18
     dda:	93 07       	cpc	r25, r19
     ddc:	09 f4       	brne	.+2      	; 0xde0 <main+0x2ac>
     dde:	04 cf       	rjmp	.-504    	; 0xbe8 <main+0xb4>
				{
					lastPrinted = currentReading;
     de0:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lastPrinted+0x1>
     de4:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <lastPrinted>
					printint_7_segment(lastPrinted);
     de8:	ef d9       	rcall	.-3106   	; 0x1c8 <printint_7_segment>
     dea:	fe ce       	rjmp	.-516    	; 0xbe8 <main+0xb4>
     dec:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <year>
				}
				break;
			
			case FORMAT_YYYY:
				currentReading = year+2000;
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	80 53       	subi	r24, 0x30	; 48
     df4:	98 4f       	sbci	r25, 0xF8	; 248
     df6:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <currentReading+0x1>
     dfa:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <currentReading>
     dfe:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <lastPrinted>
				if (lastPrinted != currentReading)
     e02:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <lastPrinted+0x1>
     e06:	82 17       	cp	r24, r18
     e08:	93 07       	cpc	r25, r19
     e0a:	09 f4       	brne	.+2      	; 0xe0e <main+0x2da>
     e0c:	ed ce       	rjmp	.-550    	; 0xbe8 <main+0xb4>
     e0e:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lastPrinted+0x1>
				{
					lastPrinted = currentReading;
     e12:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <lastPrinted>
     e16:	d8 d9       	rcall	.-3152   	; 0x1c8 <printint_7_segment>
					printint_7_segment(lastPrinted);
     e18:	e7 ce       	rjmp	.-562    	; 0xbe8 <main+0xb4>

00000e1a <__divmodsi4>:
     e1a:	05 2e       	mov	r0, r21
     e1c:	97 fb       	bst	r25, 7
     e1e:	16 f4       	brtc	.+4      	; 0xe24 <__divmodsi4+0xa>
     e20:	00 94       	com	r0
     e22:	0f d0       	rcall	.+30     	; 0xe42 <__negsi2>
     e24:	57 fd       	sbrc	r21, 7
     e26:	05 d0       	rcall	.+10     	; 0xe32 <__divmodsi4_neg2>
     e28:	2c d0       	rcall	.+88     	; 0xe82 <__udivmodsi4>
     e2a:	07 fc       	sbrc	r0, 7
     e2c:	02 d0       	rcall	.+4      	; 0xe32 <__divmodsi4_neg2>
     e2e:	46 f4       	brtc	.+16     	; 0xe40 <__divmodsi4_exit>
     e30:	08 c0       	rjmp	.+16     	; 0xe42 <__negsi2>

00000e32 <__divmodsi4_neg2>:
     e32:	50 95       	com	r21
     e34:	40 95       	com	r20
     e36:	30 95       	com	r19
     e38:	21 95       	neg	r18
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	4f 4f       	sbci	r20, 0xFF	; 255
     e3e:	5f 4f       	sbci	r21, 0xFF	; 255

00000e40 <__divmodsi4_exit>:
     e40:	08 95       	ret

00000e42 <__negsi2>:
     e42:	90 95       	com	r25
     e44:	80 95       	com	r24
     e46:	70 95       	com	r23
     e48:	61 95       	neg	r22
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	8f 4f       	sbci	r24, 0xFF	; 255
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	08 95       	ret

00000e52 <__tablejump2__>:
     e52:	ee 0f       	add	r30, r30
     e54:	ff 1f       	adc	r31, r31
     e56:	00 24       	eor	r0, r0
     e58:	00 1c       	adc	r0, r0
     e5a:	0b be       	out	0x3b, r0	; 59
     e5c:	07 90       	elpm	r0, Z+
     e5e:	f6 91       	elpm	r31, Z
     e60:	e0 2d       	mov	r30, r0
     e62:	09 94       	ijmp

00000e64 <__umulhisi3>:
     e64:	a2 9f       	mul	r26, r18
     e66:	b0 01       	movw	r22, r0
     e68:	b3 9f       	mul	r27, r19
     e6a:	c0 01       	movw	r24, r0
     e6c:	a3 9f       	mul	r26, r19
     e6e:	70 0d       	add	r23, r0
     e70:	81 1d       	adc	r24, r1
     e72:	11 24       	eor	r1, r1
     e74:	91 1d       	adc	r25, r1
     e76:	b2 9f       	mul	r27, r18
     e78:	70 0d       	add	r23, r0
     e7a:	81 1d       	adc	r24, r1
     e7c:	11 24       	eor	r1, r1
     e7e:	91 1d       	adc	r25, r1
     e80:	08 95       	ret

00000e82 <__udivmodsi4>:
     e82:	a1 e2       	ldi	r26, 0x21	; 33
     e84:	1a 2e       	mov	r1, r26
     e86:	aa 1b       	sub	r26, r26
     e88:	bb 1b       	sub	r27, r27
     e8a:	fd 01       	movw	r30, r26
     e8c:	0d c0       	rjmp	.+26     	; 0xea8 <__udivmodsi4_ep>

00000e8e <__udivmodsi4_loop>:
     e8e:	aa 1f       	adc	r26, r26
     e90:	bb 1f       	adc	r27, r27
     e92:	ee 1f       	adc	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	a2 17       	cp	r26, r18
     e98:	b3 07       	cpc	r27, r19
     e9a:	e4 07       	cpc	r30, r20
     e9c:	f5 07       	cpc	r31, r21
     e9e:	20 f0       	brcs	.+8      	; 0xea8 <__udivmodsi4_ep>
     ea0:	a2 1b       	sub	r26, r18
     ea2:	b3 0b       	sbc	r27, r19
     ea4:	e4 0b       	sbc	r30, r20
     ea6:	f5 0b       	sbc	r31, r21

00000ea8 <__udivmodsi4_ep>:
     ea8:	66 1f       	adc	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	88 1f       	adc	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	1a 94       	dec	r1
     eb2:	69 f7       	brne	.-38     	; 0xe8e <__udivmodsi4_loop>
     eb4:	60 95       	com	r22
     eb6:	70 95       	com	r23
     eb8:	80 95       	com	r24
     eba:	90 95       	com	r25
     ebc:	9b 01       	movw	r18, r22
     ebe:	ac 01       	movw	r20, r24
     ec0:	bd 01       	movw	r22, r26
     ec2:	cf 01       	movw	r24, r30
     ec4:	08 95       	ret

00000ec6 <malloc>:
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	91 05       	cpc	r25, r1
     ed2:	10 f4       	brcc	.+4      	; 0xed8 <malloc+0x12>
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <__flp>
     edc:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <__flp+0x1>
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	30 97       	sbiw	r30, 0x00	; 0
     eea:	19 f1       	breq	.+70     	; 0xf32 <malloc+0x6c>
     eec:	40 81       	ld	r20, Z
     eee:	51 81       	ldd	r21, Z+1	; 0x01
     ef0:	02 81       	ldd	r16, Z+2	; 0x02
     ef2:	13 81       	ldd	r17, Z+3	; 0x03
     ef4:	48 17       	cp	r20, r24
     ef6:	59 07       	cpc	r21, r25
     ef8:	c8 f0       	brcs	.+50     	; 0xf2c <malloc+0x66>
     efa:	84 17       	cp	r24, r20
     efc:	95 07       	cpc	r25, r21
     efe:	69 f4       	brne	.+26     	; 0xf1a <malloc+0x54>
     f00:	10 97       	sbiw	r26, 0x00	; 0
     f02:	31 f0       	breq	.+12     	; 0xf10 <malloc+0x4a>
     f04:	12 96       	adiw	r26, 0x02	; 2
     f06:	0c 93       	st	X, r16
     f08:	12 97       	sbiw	r26, 0x02	; 2
     f0a:	13 96       	adiw	r26, 0x03	; 3
     f0c:	1c 93       	st	X, r17
     f0e:	27 c0       	rjmp	.+78     	; 0xf5e <malloc+0x98>
     f10:	00 93 29 02 	sts	0x0229, r16	; 0x800229 <__flp>
     f14:	10 93 2a 02 	sts	0x022A, r17	; 0x80022a <__flp+0x1>
     f18:	22 c0       	rjmp	.+68     	; 0xf5e <malloc+0x98>
     f1a:	21 15       	cp	r18, r1
     f1c:	31 05       	cpc	r19, r1
     f1e:	19 f0       	breq	.+6      	; 0xf26 <malloc+0x60>
     f20:	42 17       	cp	r20, r18
     f22:	53 07       	cpc	r21, r19
     f24:	18 f4       	brcc	.+6      	; 0xf2c <malloc+0x66>
     f26:	9a 01       	movw	r18, r20
     f28:	bd 01       	movw	r22, r26
     f2a:	ef 01       	movw	r28, r30
     f2c:	df 01       	movw	r26, r30
     f2e:	f8 01       	movw	r30, r16
     f30:	db cf       	rjmp	.-74     	; 0xee8 <malloc+0x22>
     f32:	21 15       	cp	r18, r1
     f34:	31 05       	cpc	r19, r1
     f36:	f9 f0       	breq	.+62     	; 0xf76 <malloc+0xb0>
     f38:	28 1b       	sub	r18, r24
     f3a:	39 0b       	sbc	r19, r25
     f3c:	24 30       	cpi	r18, 0x04	; 4
     f3e:	31 05       	cpc	r19, r1
     f40:	80 f4       	brcc	.+32     	; 0xf62 <malloc+0x9c>
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	61 15       	cp	r22, r1
     f48:	71 05       	cpc	r23, r1
     f4a:	21 f0       	breq	.+8      	; 0xf54 <malloc+0x8e>
     f4c:	fb 01       	movw	r30, r22
     f4e:	93 83       	std	Z+3, r25	; 0x03
     f50:	82 83       	std	Z+2, r24	; 0x02
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <malloc+0x96>
     f54:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <__flp+0x1>
     f58:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <__flp>
     f5c:	fe 01       	movw	r30, r28
     f5e:	32 96       	adiw	r30, 0x02	; 2
     f60:	44 c0       	rjmp	.+136    	; 0xfea <malloc+0x124>
     f62:	fe 01       	movw	r30, r28
     f64:	e2 0f       	add	r30, r18
     f66:	f3 1f       	adc	r31, r19
     f68:	81 93       	st	Z+, r24
     f6a:	91 93       	st	Z+, r25
     f6c:	22 50       	subi	r18, 0x02	; 2
     f6e:	31 09       	sbc	r19, r1
     f70:	39 83       	std	Y+1, r19	; 0x01
     f72:	28 83       	st	Y, r18
     f74:	3a c0       	rjmp	.+116    	; 0xfea <malloc+0x124>
     f76:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <__brkval>
     f7a:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <__brkval+0x1>
     f7e:	23 2b       	or	r18, r19
     f80:	41 f4       	brne	.+16     	; 0xf92 <malloc+0xcc>
     f82:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
     f86:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
     f8a:	30 93 28 02 	sts	0x0228, r19	; 0x800228 <__brkval+0x1>
     f8e:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <__brkval>
     f92:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     f96:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     f9a:	21 15       	cp	r18, r1
     f9c:	31 05       	cpc	r19, r1
     f9e:	41 f4       	brne	.+16     	; 0xfb0 <malloc+0xea>
     fa0:	2d b7       	in	r18, 0x3d	; 61
     fa2:	3e b7       	in	r19, 0x3e	; 62
     fa4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
     fa8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
     fac:	24 1b       	sub	r18, r20
     fae:	35 0b       	sbc	r19, r21
     fb0:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <__brkval>
     fb4:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <__brkval+0x1>
     fb8:	e2 17       	cp	r30, r18
     fba:	f3 07       	cpc	r31, r19
     fbc:	a0 f4       	brcc	.+40     	; 0xfe6 <malloc+0x120>
     fbe:	2e 1b       	sub	r18, r30
     fc0:	3f 0b       	sbc	r19, r31
     fc2:	28 17       	cp	r18, r24
     fc4:	39 07       	cpc	r19, r25
     fc6:	78 f0       	brcs	.+30     	; 0xfe6 <malloc+0x120>
     fc8:	ac 01       	movw	r20, r24
     fca:	4e 5f       	subi	r20, 0xFE	; 254
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	24 17       	cp	r18, r20
     fd0:	35 07       	cpc	r19, r21
     fd2:	48 f0       	brcs	.+18     	; 0xfe6 <malloc+0x120>
     fd4:	4e 0f       	add	r20, r30
     fd6:	5f 1f       	adc	r21, r31
     fd8:	50 93 28 02 	sts	0x0228, r21	; 0x800228 <__brkval+0x1>
     fdc:	40 93 27 02 	sts	0x0227, r20	; 0x800227 <__brkval>
     fe0:	81 93       	st	Z+, r24
     fe2:	91 93       	st	Z+, r25
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <malloc+0x124>
     fe6:	e0 e0       	ldi	r30, 0x00	; 0
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	cf 01       	movw	r24, r30
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	08 95       	ret

00000ff6 <free>:
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	09 f4       	brne	.+2      	; 0x1000 <free+0xa>
     ffe:	81 c0       	rjmp	.+258    	; 0x1102 <free+0x10c>
    1000:	fc 01       	movw	r30, r24
    1002:	32 97       	sbiw	r30, 0x02	; 2
    1004:	13 82       	std	Z+3, r1	; 0x03
    1006:	12 82       	std	Z+2, r1	; 0x02
    1008:	a0 91 29 02 	lds	r26, 0x0229	; 0x800229 <__flp>
    100c:	b0 91 2a 02 	lds	r27, 0x022A	; 0x80022a <__flp+0x1>
    1010:	10 97       	sbiw	r26, 0x00	; 0
    1012:	81 f4       	brne	.+32     	; 0x1034 <free+0x3e>
    1014:	20 81       	ld	r18, Z
    1016:	31 81       	ldd	r19, Z+1	; 0x01
    1018:	82 0f       	add	r24, r18
    101a:	93 1f       	adc	r25, r19
    101c:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <__brkval>
    1020:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <__brkval+0x1>
    1024:	28 17       	cp	r18, r24
    1026:	39 07       	cpc	r19, r25
    1028:	51 f5       	brne	.+84     	; 0x107e <free+0x88>
    102a:	f0 93 28 02 	sts	0x0228, r31	; 0x800228 <__brkval+0x1>
    102e:	e0 93 27 02 	sts	0x0227, r30	; 0x800227 <__brkval>
    1032:	67 c0       	rjmp	.+206    	; 0x1102 <free+0x10c>
    1034:	ed 01       	movw	r28, r26
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	ce 17       	cp	r28, r30
    103c:	df 07       	cpc	r29, r31
    103e:	40 f4       	brcc	.+16     	; 0x1050 <free+0x5a>
    1040:	4a 81       	ldd	r20, Y+2	; 0x02
    1042:	5b 81       	ldd	r21, Y+3	; 0x03
    1044:	9e 01       	movw	r18, r28
    1046:	41 15       	cp	r20, r1
    1048:	51 05       	cpc	r21, r1
    104a:	f1 f0       	breq	.+60     	; 0x1088 <free+0x92>
    104c:	ea 01       	movw	r28, r20
    104e:	f5 cf       	rjmp	.-22     	; 0x103a <free+0x44>
    1050:	d3 83       	std	Z+3, r29	; 0x03
    1052:	c2 83       	std	Z+2, r28	; 0x02
    1054:	40 81       	ld	r20, Z
    1056:	51 81       	ldd	r21, Z+1	; 0x01
    1058:	84 0f       	add	r24, r20
    105a:	95 1f       	adc	r25, r21
    105c:	c8 17       	cp	r28, r24
    105e:	d9 07       	cpc	r29, r25
    1060:	59 f4       	brne	.+22     	; 0x1078 <free+0x82>
    1062:	88 81       	ld	r24, Y
    1064:	99 81       	ldd	r25, Y+1	; 0x01
    1066:	84 0f       	add	r24, r20
    1068:	95 1f       	adc	r25, r21
    106a:	02 96       	adiw	r24, 0x02	; 2
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	9b 81       	ldd	r25, Y+3	; 0x03
    1074:	93 83       	std	Z+3, r25	; 0x03
    1076:	82 83       	std	Z+2, r24	; 0x02
    1078:	21 15       	cp	r18, r1
    107a:	31 05       	cpc	r19, r1
    107c:	29 f4       	brne	.+10     	; 0x1088 <free+0x92>
    107e:	f0 93 2a 02 	sts	0x022A, r31	; 0x80022a <__flp+0x1>
    1082:	e0 93 29 02 	sts	0x0229, r30	; 0x800229 <__flp>
    1086:	3d c0       	rjmp	.+122    	; 0x1102 <free+0x10c>
    1088:	e9 01       	movw	r28, r18
    108a:	fb 83       	std	Y+3, r31	; 0x03
    108c:	ea 83       	std	Y+2, r30	; 0x02
    108e:	49 91       	ld	r20, Y+
    1090:	59 91       	ld	r21, Y+
    1092:	c4 0f       	add	r28, r20
    1094:	d5 1f       	adc	r29, r21
    1096:	ec 17       	cp	r30, r28
    1098:	fd 07       	cpc	r31, r29
    109a:	61 f4       	brne	.+24     	; 0x10b4 <free+0xbe>
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	84 0f       	add	r24, r20
    10a2:	95 1f       	adc	r25, r21
    10a4:	02 96       	adiw	r24, 0x02	; 2
    10a6:	e9 01       	movw	r28, r18
    10a8:	99 83       	std	Y+1, r25	; 0x01
    10aa:	88 83       	st	Y, r24
    10ac:	82 81       	ldd	r24, Z+2	; 0x02
    10ae:	93 81       	ldd	r25, Z+3	; 0x03
    10b0:	9b 83       	std	Y+3, r25	; 0x03
    10b2:	8a 83       	std	Y+2, r24	; 0x02
    10b4:	e0 e0       	ldi	r30, 0x00	; 0
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	12 96       	adiw	r26, 0x02	; 2
    10ba:	8d 91       	ld	r24, X+
    10bc:	9c 91       	ld	r25, X
    10be:	13 97       	sbiw	r26, 0x03	; 3
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	19 f0       	breq	.+6      	; 0x10ca <free+0xd4>
    10c4:	fd 01       	movw	r30, r26
    10c6:	dc 01       	movw	r26, r24
    10c8:	f7 cf       	rjmp	.-18     	; 0x10b8 <free+0xc2>
    10ca:	8d 91       	ld	r24, X+
    10cc:	9c 91       	ld	r25, X
    10ce:	11 97       	sbiw	r26, 0x01	; 1
    10d0:	9d 01       	movw	r18, r26
    10d2:	2e 5f       	subi	r18, 0xFE	; 254
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	82 0f       	add	r24, r18
    10d8:	93 1f       	adc	r25, r19
    10da:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <__brkval>
    10de:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <__brkval+0x1>
    10e2:	28 17       	cp	r18, r24
    10e4:	39 07       	cpc	r19, r25
    10e6:	69 f4       	brne	.+26     	; 0x1102 <free+0x10c>
    10e8:	30 97       	sbiw	r30, 0x00	; 0
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <free+0x100>
    10ec:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__flp+0x1>
    10f0:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <__flp>
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <free+0x104>
    10f6:	13 82       	std	Z+3, r1	; 0x03
    10f8:	12 82       	std	Z+2, r1	; 0x02
    10fa:	b0 93 28 02 	sts	0x0228, r27	; 0x800228 <__brkval+0x1>
    10fe:	a0 93 27 02 	sts	0x0227, r26	; 0x800227 <__brkval>
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <_exit>:
    1108:	f8 94       	cli

0000110a <__stop_program>:
    110a:	ff cf       	rjmp	.-2      	; 0x110a <__stop_program>
